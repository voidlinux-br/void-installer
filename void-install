#!/usr/bin/env bash
#shellcheck disable=SC2145,SC2001,SC2188,SC2015,SC2155,SC2317,SC2320,SC2291,SC2034,SC2120,SC2086,SC2319
#shellcheck disable=SC2016,SC2154,SC2207,SC2166,SC2128,SC2059,SC2140,SC2031,SC2030,SC2036,SC2119,SC2027

#  void-install
#  Created: 2022/12/24
#  Altered: 2024/03/11
#  Updated: dom 02 fev 2025 18:43:58 -04
#
#  Copyright (c) 2022-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=void-install

#todo
#usermod -a -G bluetooth $USER

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
shopt -s extglob

#system
readonly APP="${0##*/}"
readonly _VERSION_='2.25.02.02-20250202'
readonly distro=$(uname -n)
readonly DEPENDENCIES=(dialog rsync awk tar sed cat grep sort tr chroot blkid fdisk parted lsblk curl xz mkfs.vfat tee lvm cryptsetup gettext)
#                      cfdisk gdisk sfdisk efivar mkfs.ext2 mkfs.ext3 mkfs.ext4 mkfs.btrfs mkfs.xfs mkfs.f2fs mkfs.jfs mkfs.reiserfs)
#
declare LCUSTOM=false
declare LEFI=false
declare LGRUB=true
declare -gi ncounter=0 njobs=73
declare -gi quiet=0 grafico=0
declare -gi LAUTO=1 LINSTALL=0 LCHROOT=0 LBIND=0 LMKPART=0 LBIOS=1 LMKPARTED=0 LOSPROBER=0 LFDE=0 LVM=0 LFS=0 LPARTITION=0 LTABLE=0
declare -gi HYPRLAND=0
declare -gA AsUser=([cpass]='voidlinux' [cpassroot]='voidlinux' [chostname]='voidlinux' [cgroups]='wheel,audio,video,floppy,cdrom,optical,kvm,xbuilder')
declare -gA Amntpoint
declare -gA AmntpointFDE
declare -gA Amkfs
declare -gA AARRAY_DSK_DEVICES
declare -gA AARRAY_PART_DEVICES
declare -gA AARRAY_VG_DEVICES
declare -gA AConfFde=([partition]='' [vg]='voidvm' [passphrase]='voidlinux' [verifypassphrase]='voidlinux' [lvroot]='25%' [lvswap]='2%' [lvvar]='' [lvhome]='100%')
declare -gA AConfDisk=([_DEVICE]='/dev/sdX' [_FILESYSTEM]='ext4' [_DISKTABLE]='' [_BOOTLOADER]='/dev/sdX' [_OSPROBER]=0)
declare -gA AConfLocale=([_TIMEZONE]='America/Sao_Paulo' [_KEYMAP]='br-abnt2' [_CLOCK]='UTC' [_FONT]='default8x16' [_FONT_OLD]='Lat2-Terminus16')
declare -gA AConfMirror=([_SOURCE]='network' [_MIRROR]='repo - fastly.voidlinux.org' [url_mirror]='https://repo-fastly.voidlinux.org' [location]='Fastly Global CDN')
declare -gA AConfWifi=([_NETWORK]='wifi_ssid' [_PASSWORD]='wifi_password')
declare -gA Alanguage=([pt_BR]=0 [en_US]=1 [de_DE]=2 [fr_FR]=3 [es_ES]=4 [it_IT]=5)
declare -gA Alocale=([0]=pt_BR [1]=en_US [2]=de_DE [3]=fr_FR [4]=es_ES [5]=it_IT)

sh_update_self() {
  local repo_url="https://raw.githubusercontent.com/voidlinux-br/void-installer/main/void-install"
  local local_script="$0"
  local temp_file
  local remote_hash
  local local_hash

  # Cria um arquivo temporário para armazenar a versão remota
  temp_file=$(mktemp)

  log_msg "Verificando por atualizações do script..."

  # Baixa a versão mais recente do repositório
  if command -v curl >/dev/null 2>&1; then
    curl -sSfL "$repo_url" -o "$temp_file"
  elif command -v wget >/dev/null 2>&1; then
    wget -q "$repo_url" -O "$temp_file"
  else
    log_msg "Erro: nem curl nem wget estão instalados. Atualização não pode ser realizada."
    rm -f "$temp_file"
    return 1
  fi

  # Calcula os hashes das versões local e remota
  remote_hash=$(sha256sum "$temp_file" | awk '{print $1}')
  local_hash=$(sha256sum "$local_script" | awk '{print $1}')

  # Compara os hashes para detectar mudanças
  if [[ "$remote_hash" != "$local_hash" ]]; then
    log_msg "Nova versão encontrada. Atualizando o script..."
    mv "$temp_file" "$local_script"
    chmod +x "$local_script"
    log_msg "Atualização concluída. Recarregando o script..."
    exec "$local_script" "$@" # Recarrega o script com os mesmos argumentos
  else
    log_msg "O script já está atualizado."
    rm -f "$temp_file"
  fi
}

sh_choose_packages() {
	## begin packages

	declare -ga aXorg=('xorg' 'xinit' 'xterm' 'xorg-fonts' 'dbus-x11' 'elogind' 'dbus-elogind' 'polkit-elogind' 'xdg-user-dirs' 'xrdb')
	declare -ga aPulseaudio=('pulseaudio' 'pavucontrol' 'pasystray' 'gst-plugins-bad1' 'gst-plugins-good1' 'gst-plugins-ugly1' 'gst-plugins-base1')
	declare -ga aPipewire=('pipewire' 'wireplumber' 'pulseaudio-utils' 'alsa-pipewire' 'libspa-bluetooth' 'libjack-pipewire')
	if $LCUSTOM; then
		## X11
		declare -ga aIconsAndThemes=('Adapta' 'adwaita-icon-theme' 'chili-void-beauty-icons' 'chili-void-wallpapers' 'chili-void-gnome-professional-theme' 'xfwm-axiom-theme')
		declare -ga aArchiverX=('xarchiver')
		declare -ga aBrowser=('firefox' "firefox-i18n-$(sh_get_language_without_utf8)" 'brave-bin')
		declare -ga aBluetooth=('bluez' 'bluez-alsa' 'bluedevil' 'blueman' 'bluez-cups' 'bluez-deprecated' 'gnome-bluetooth1' 'blueberry')
		declare -ga aDisplaymanager=('lxdm' 'lxdm-theme-vdojo')
		declare -ga aFilemanager=('Thunar' 'thunar-archive-plugin' 'thunar-volman' 'pcmanfm' 'octoxbps')
		declare -ga aFont+=('liberation-fonts-ttf' 'dejavu-fonts-ttf' 'fonts-droid-ttf' 'fonts-croscore-ttf' 'terminus-font' 'ttf-ubuntu-font-family' 'font-iosevka')
					aFont+=('unicode-emoji' 'noto-fonts-emoji' 'font-emoji-one-color' 'unicode-emoji' 'nerd-fonts-symbols-ttf' 'font-hack-ttf')
		            aFont+=('font-awesome' 'font-awesome5' 'font-awesome6')
		declare -ga aPerfumery=('conky' 'setxkbmap' 'numlockx' 'nitrogen' 'ristretto' 'mate-notification-daemon')
		declare -ga aPrinter=('cups' 'system-config-printer' 'system-config-printer-udev' 'splix' 'samsung-unified-driver' 'brother-brlaser' 'cups-pdf')
		declare -ga aTerminal=('rxvt-unicode' 'xfce4-terminal' 'cool-retro-term')
		declare -ga aEditorX=('kate' 'mousepad')
		declare -ga aMicrocode=('intel-ucode' 'linux-firmware-amd')
		declare -ga aNetworkX=('network-manager-applet' 'gvfs' 'gvfs-smb' 'gvfs-cdda')
		declare -ga aUtilityX=('mate-calc' 'xkill' 'menulibre' 'mugshot' 'ocs-url' 'remmina' 'remmina-kwallet')
		## tty
		declare -ga aDaemons=('NetworkManager' 'acpi' 'acpid' 'gpm' 'connman' 'irqbalance' 'avahi')
		declare -ga aArchiverTty=('unrar' 'zip' 'p7zip' 'unzip' 'bzip2')
		declare -ga aDownloader=('curl' 'wget' 'git' 'lynx')
		declare -ga aEditorTxt=('nano')
		declare -ga aUtility=('dialog' 'gettext' 'binutils' 'sed' 'grep' 'tree' 'pv' 'parted' 'rsync' 'duf' 'dfc' 'tmate' 'inetutils' 'iputils')
					      aUtility+=('cifs-utils' 'ntfs-3g' 'btop' 'htop' 'parallel' 'evtest' 'bubblewrap' 'pacman' 'fakeroot' 'bsdtar' 'exa' 'cmatrix')
					      aUtility+=('nvme-cli')
		declare -ga _PKGS='neofetch pfetch bc bat fzf bash-completion vpm vsv xtools geoip geoipupdate #geoip-data pigz'
		#--repository=https://chililinux.com/void/current
		declare -ga _EXTRAS=''
    if sh_checkRepo 'https://chililinux.com/void/current'; then
		  _EXTRAS='nano-syntax-highlighting'
		  _EXTRAS+=' chili-void-grub-theme'
		  _EXTRAS+=' chili-void-tools'
		  _EXTRAS+=' chili-nano-config'
		  _EXTRAS+=' chili-utils'
		  _EXTRAS+=' chili-void-tools'
    fi
		## end packages
	else
		## X11
		declare -ga aIconsAndThemes=('Adapta' 'adwaita-icon-theme')
		declare -ga aArchiverX=()
		declare -ga aBrowser=('firefox' "firefox-i18n-$(sh_get_language_without_utf8)")
		declare -ga aBluetooth=()
		declare -ga aDisplaymanager=('lxdm')
		declare -ga aFilemanager=('Thunar' 'pcmanfm')
		declare -ga aFont+=()
		declare -ga aPerfumery=()
		declare -ga aPrinter=()
		declare -ga aTerminal=('xfce4-terminal')
		declare -ga aEditorX=()
		declare -ga aMicrocode=()
		declare -ga aNetworkX=('network-manager-applet')
		declare -ga aUtilityX=('gettext')
		## tty
		declare -ga aDaemons=('NetworkManager')
		declare -ga aArchiverTty=()
		declare -ga aDownloader=()
		declare -ga aEditorTxt=()
		declare -ga aUtility=()
		declare -ga _PKGS=''
		#--repository=https://chililinux.com/void/current
		declare -ga _EXTRAS=''
		## end packages
	fi
}

declare _DEVICE='/dev/sdX'
declare _FILESYSTEM='ext4'
declare _AUDIOSERVER='Pulseaudio'
declare _DISKTABLE=''
declare _BOOTLOADER="$_DEVICE"
declare _WINDOWMANAGER=('tty')
declare _WIFI_NETWORK="wifi_ssid"
declare _WIFI_PASSWORD="wifi_password"
declare _SOURCE="network"
declare _ONLY_TTY=1
#source /usr/bin/gettext.sh
#declare Interrupted="$(gettext "Interrompido!") $(pgettext "context" "Saindo...")"
declare Interrupted="$(gettext "Interrompido! Saindo...")"
trap 'printf "\n${red}$Interrupted\n"; cleanup; exit 0' INT TERM HUP

errorbeep() {
	printf '\a' # beep
}

info_msg() {
#	notify-send "$ccabec" "$@"
	printf "\033[1m$@\n\033[m"
}

cleanup() {
	info_msg "$(gettext "Removendo arquivos temporários...")"
	rm -fv "$BOOTLOG"
	sh_umount_fs
	exit 1
}

sh_setEnvironment() {
	declare url_mirror='https://repo-fastly.voidlinux.org/'
	declare -g app_conf='/tmp/void-install.conf'
	readonly cnickefi='Void_install'
	readonly dir_install='/mnt/voidlinux'
  #readonly _TARBALL_ROOTFS=void-x86_64-base-minimal-current.tar.xz
  #readonly _TARBALL_ROOTFS=void-x86_64-base-voidstrap-current.tar.xz
  #readonly _TARBALL_ROOTFS=void-x86_64-base-system-current.tar.xz
  readonly _TARBALL_ROOTFS=void-x86_64-base-custom-current.tar.xz
	#readonly url_tarball="https://github.com/voidlinux-br/void-installer/raw/master/${_TARBALL_ROOTFS}"
	readonly url_tarball="https://raw.githubusercontent.com/voidlinux-br/void-installer/refs/heads/main/${_TARBALL_ROOTFS}"
	readonly url_tarball_md5="https://raw.githubusercontent.com/voidlinux-br/void-installer/refs/heads/main/${_TARBALL_ROOTFS}.md5"
	readonly true=1
	readonly false=0
	readonly err_fatal=$true
	readonly err_not_fatal=$false
	readonly BOOTLOG="/tmp/void-install-$(sh_diahora).log"
	readonly LOGGER='/dev/tty8'
	shell='/bin/sh'
	: "${ccabec="$APP v${_VERSION_} - https://github.com/voidlinux-br/void-installer"}"
	: "${ccabecmin="$APP v${_VERSION_}"}"
	: "${DIALOG=${DIALOG:-dialog}}"
	: ${ARCH:=x86_64}
	: ${CACHEDIR:="$(pwd -P)"/xbps-cachedir-${ARCH}}
	: ${XBPS_INSTALL_CMD:=xbps-install}
	: ${XBPS_INSTALL_UNPACK_ONLY:=xbps-install -Uy}
	: ${XBPS_REMOVE_CMD:=xbps-remove}
	: ${XBPS_QUERY_CMD:=xbps-query}
	: ${XBPS_RINDEX_CMD:=xbps-rindex}
	: ${XBPS_UHELPER_CMD:=xbps-uhelper}
	: ${XBPS_RECONFIGURE_CMD:=xbps-reconfigure}

	# flag disk info
	: "${DSK_NAME=1}"
	: "${DSK_SIZE=2}"
	: "${DSK_TRAN=3}"
	: "${DSK_MODEL=4}"
	: "${DSK_LABEL=5}"
	: "${DSK_SERIAL=6}"
	: "${DSK_PTTYPE=7}"
	: "${DSK_FSTYPE=8}"
	: "${DSK_PARTTYPENAME=9}"

	# flag languages
	: "${PT_BR=0}"
	: "${EN_US=1}"
	: "${DE_DE=2}"
	: "${FR_FR=3}"
	: "${LC_DEFAULT=$(sh_getLocale)}"

	# flag dialog exit status codes
	: "${D_OK=0}"
	: "${D_DONE=0}"
	: "${D_CANCEL=1}"
	: "${D_HELP=2}"
	: "${D_EXTRA=3}"
	: "${D_CONFIG=3}"
	: "${D_ITEM_HELP=4}"
	: "${D_ESC=255}"

	# flag dialog menu
	: "${LDISK=}"
	: "${LFS=}"
	: "${LPARTITION=}"
	: "${LGRUB=}"
	: "${LKEYMAP=}"
	: "${LWM=}"
	: "${LWIFI=}"
	: "${LMIRROR=}"
	: "${LSOURCE=}"
	: "${LEXTRA=}"
	: "${LAUDIO=}"
	: "${LTIMEZONE=}"
	: "${LFILE=}"

	# dialog colors
	GREEN="\Z2"
	MAGENTA="\Z5"
	REVERSE="\Zr"
	UNDERLINE="\Zu"
	BLACK="\Z0"
	YELLOW="\Z3"
	WHITE="\Z7"
	BLUE="\Z4"
	CYAN="\Z6"
	RED="\Z1"
	BOLD="\Zb"
	RESET="\Zn"
	: echo "$err_fatal"

	size=$(stty size)
	read -r MAXROW MAXCOL <<<"$size"
	if [[ -z "${COLUMNS}" ]]; then
		COLUMNS=$(stty size)
		COLUMNS=${COLUMNS##* }
	fi
	if [[ "${COLUMNS}" = "0" ]]; then
		COLUMNS=80
	fi
	COL=$((COLUMNS - 8))
	SET_COL="\\033[${COL}G" # at the $COL char
	CURS_ZERO="\\033[0G"
}

sh_touchConf() {
#		_WINDOWMANAGER=(${_WINDOWMANAGER[*]})
	cat >"$app_conf" <<-EOF
		######################################################################
		# void-install.conf
		# Gerado por void-install
		######################################################################
		BOOTLOADER=$_BOOTLOADER
		DISKTABLE=$_DISKTABLE
		WIFI_NETWORK=$_WIFI_NETWORK
		WIFI_PASSWORD=$_WIFI_PASSWORD
		SOURCE=$_SOURCE
		PKGS="$_PKGS"
		EXTRAS="$_EXTRAS"
	EOF
	{
		declare -p _DEVICE
		declare -p _BOOTLOADER
		declare -p _DISKTABLE
		declare -p _WIFI_NETWORK
		declare -p _WIFI_PASSWORD
		declare -p _SOURCE
		declare -p _WINDOWMANAGER
		declare -p AsUser
		declare -p Amkfs
		declare -p Amntpoint
		declare -p AmntpointFDE
		declare -p AConfDisk
		declare -p AConfLocale
		declare -p AConfMirror
		declare -p AConfWifi
		declare -p AConfFde
		declare -p LCUSTOM
		declare -p HYPRLAND
		declare -p LEFI
		declare -p LGRUB
		declare -p LBIOS
		#	declare -p AARRAY_DSK_DEVICES
		#	declare -p AARRAY_PART_DEVICES
#	} | sed 's/declare -/&g/' >>"$app_conf"
#	} | sed -E 's/^declare (--|-g|-x)* //g' >>"$app_conf"
#	} | sed 's/declare -/&g/' | sed -E 's/^declare -g-* /declare -g /g' >>"$app_conf"
	} | sed -E 's/declare -/&g/; s/^declare -g-* /declare -g /' >>"$app_conf"
}

sh_checkDisplay() {
	local msg1="$(gettext "Antes de continuar, redimensione o terminal")"
	local msg2="$(gettext "para que ele meça pelo menos 80 x 24 caracteres.")"
	local msg3="$(gettext "Caso contrário, ")"
	local msg4="$(gettext "você não poderá usar as ferramentas de partição de Disco.")"

	if [ "$(tput cols)" -lt 80 ] || [ "$(tput lines)" -lt 24 ]; then
		dialog --backtitle "$ccabec" \
			--title "$(gettext "TERMINAL MUITO PEQUENO")" \
			--msgbox "\n\
$cms1\n$cmsg2\n\
$cmsg3$cmsg4" 11 68
	fi
}

sh_lang_he() {
    grep ^he <<<"$LANG"
    return "$?"
}
export -f sh_lang_he

sh_get_locale() {
    grep _ <(locale -a) | head -1 | cut -c1-5
}
export -f sh_get_locale

sh_get_code_lang() {
    local LangFilter="${LANG%%.*}"
    local LangFilterLowercase="${LangFilter,,}"
    local LangClean="${LangFilterLowercase%%_*}"
    local LangCountry="${LangFilterLowercase#*_}"
    local LangFilterLowercaseModified="${LangFilterLowercase//_/-}"
    echo "$LangFilterLowercaseModified"
}
export -f sh_get_code_lang

sh_get_lang() {
    echo "$LANG"
}
export -f sh_get_lang

sh_get_language_without_utf8() {
	local LangFilter="${LANG%%.*}"
	local LangFilterModified="${LangFilter//_/-}"
	echo "$LangFilterModified"
}
export -f sh_get_language_without_utf8

sh_get_code_language() {
    local LangFilter="${LANGUAGE%%.*}"
    local LangFilterLowercase="${LangFilter,,}"
    local LangClean="${LangFilterLowercase%%_*}"
    local LangCountry="${LangFilterLowercase#*_}"
    local LangFilterLowercaseModified="${LangFilterLowercase//_/-}"
    echo "$LangFilterLowercaseModified"
}
export -f sh_get_code_language

sh_get_language() {
    echo "$LANGUAGE"
}
export -f sh_get_language

sh_getcpu() {
    #awk -F ':' 'NR==1 {print $2}' <<< "$(grep 'model name' /proc/cpuinfo)"
    grep 'model name' /proc/cpuinfo | awk -F ':' 'NR==1 {print $2}'
}
export -f sh_getcpu

sh_getmemory() {
    awk -F' ' 'NR==2 {print $2}' < <(free -h)
}
export -f sh_getmemory

sh_getvga() {
	awk -F: '/VGA/ {print $3}' < <(lspci)
}
export -f sh_getvga

sh_catecho() {
    echo "$(<"$1")"
}
export -f sh_catecho

sh_disablePrintk() {
	if [[ -w /proc/sys/kernel/printk ]]; then
		echo 0 >/proc/sys/kernel/printk
	fi
}

sh_enablePrintk() {
	if [[ -w /proc/sys/kernel/printk ]]; then
		echo 4 >/proc/sys/kernel/printk
	fi
}

sh_loadSavedConfig() {
	[[ -s "$app_conf" ]] || sh_touchConf
	# shellcheck source=/dev/null
	if [[ -f "$app_conf" ]]; then
		source "$app_conf"
	else
		die "${cmsg_falhaAbertura[$LC_DEFAULT]} $app_conf!"
	fi
	sh_setUser
  #debug $(declare -p LCUSTOM)
}

sh_setUser() {
	AsUser[cuser]=${AsUser[cuser]:-$(sh_getusernameloggeduserbyid)}
	AsUser[cfullname]=${AsUser[cfullname]:-$(sh_getfullusernameloggeduserbyGetent)}
	AsUser[cpass]=${AsUser[cpass]:-voidlinux}
	AsUser[cpassroot]=${AsUser[cpassroot]:-voidlinux}
	AsUser[chostname]=${AsUser[chostname]:-voidlinux}
	AsUser[cgroups]=${AsUser[cgroups]:-"wheel,audio,video,floppy,cdrom,optical,kvm,xbuilder"}
}

# Testa se o terminal suporta caracteres gráficos estendidos
sh_setAsciiLines() {
  #Isso força o dialog a usar caracteres ASCII básicos para as bordas.
  #if [[ "$LANG" =~ 'UTF-8' ]]; then
  if [[ "$(printf '\u250C')" =~ "┌" ]]; then
    export NCURSES_NO_UTF8_ACS=1  # Terminal suporta ACS
  else
    export NCURSES_NO_UTF8_ACS=0  # Terminal NÃO suporta ACS
  fi
}

sh_checkRoot() {
	if [[ "$(id -u)" != "0" ]]; then
		die "${red} ${cmsg_operNotRoot[$LC_DEFAULT]}"
	fi
}

sh_checkRepo() {
  local url_repo="$1"
  local response

	last_msg="${cmsg_ChecandoRota[$LC_DEFAULT]} ${url_repo}"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
  response=$(curl -o /dev/null -s -w "%{http_code}\n" -L "$url_repo")
	retval=$?
	if [[ "$response" -eq 200 ]]; then
	  evaluate_retval "0" "$err_not_fatal" "response: $response ($url_repo)"
  	return 0
	fi
	evaluate_retval "1" "$err_not_fatal" "response: $response: ${cmsg_SemRota[$LC_DEFAULT]} ($url_repo) - ${cmsg_CheckNet[$LC_DEFAULT]}"
	return 1
}

sh_checkNet() {
	xurl="$1"
	local retval

	# have internet?
	last_msg="${cmsg_ChecandoRota[$LC_DEFAULT]} ${xurl}"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	response=$(curl --compressed -s -w "%{http_code}\n" -o /dev/null -k --url "${xurl}")
	retval=$?
	if [[ "$response" -eq 000 || "$response" -eq 404 ]]; then
		evaluate_retval "$err_fatal" "$err_fatal" "reponse: $response - ${cmsg_SemRota[$LC_DEFAULT]} ($xurl) - ${cmsg_CheckNet[$LC_DEFAULT]}"
	fi
  evaluate_retval "0" "$err_not_fatal" "response: $response ($xurl)"
  return 0
}

sh_downloadTarball() {
	sh_checkNet "$url_tarball" || return 1
	last_msg="${cmsg_IniciandoDownload[$LC_DEFAULT]} $url_tarball"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	curl -L -C - --insecure --silent --remote-name "$url_tarball" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	if [[ "${PIPESTATUS[0]}" -eq 1 ]]; then
		evaluate_retval "1" "$err_fatal" "${cmsg_SemRota[$LC_DEFAULT]} ($url_mirror) - ${cmsg_CheckNet[$LC_DEFAULT]}"
	fi
	evaluate_retval "0"
	return 0
}

sh_checkTarball() {
	last_msg="${cmsg_ChecandoTarball[$LC_DEFAULT]} rootfs $_TARBALL_ROOTFS"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	#	test -e "$_TARBALL_ROOTFS" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	#	if ! [[ "${PIPESTATUS[0]}" -eq 0 ]]; then
	if ! [[ -e "$_TARBALL_ROOTFS" ]]; then
		evaluate_retval "1" "$err_not_fatal"
		rm -f "$_TARBALL_ROOTFS"
		sh_downloadTarball
	else
		evaluate_retval "0"
		return 0
	fi
	#	return "{PIPESTATUS[0]}"
	return "$?"
}

sh_checkIntegrityTarball() {
	sh_checkTarball || return 1
	last_msg="${cmsg_VerificandoIntegridadeTarball[$LC_DEFAULT]} rootfs $_TARBALL_ROOTFS"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	tar -tf "$_TARBALL_ROOTFS" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	if ! [[ "${PIPESTATUS[0]}" -eq 0 ]]; then
		evaluate_retval "1" "$err_not_fatal"
		rm -f "$_TARBALL_ROOTFS"
		sh_downloadTarball
	else
		evaluate_retval "0"
		return 0
	fi
	return "${PIPESTATUS[0]}"
}

#dom 03 mar 2024 17:00:23 -04
sh_checkcommand() {
	local cmd="$1"
	command -v "$1" > /dev/null 2>&-
	return $?
}

sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}${cmsg_ERRO[$LC_DEFAULT]}${reset}: ${cmsg_CommandNotFound[$LC_DEFAULT]} ${cyan}'$d'${reset}"
	done
	if ((errorFound)); then
		echo "${yellow}--------------${cmsg_ImpossivelContinuar[$LC_DEFAULT]}-------------${reset}"
		echo "${cmsg_ImpossivelContinuar1[$LC_DEFAULT]}" >&2
		echo "${cmsg_ImpossivelContinuar2[$LC_DEFAULT]} \$PATH" >&2
		echo "${yellow}-----------------------------------------------${reset}"

		if [[ "$distro" = @(void|void-live|voidlinux) ]]; then
			echo
			if readconf "${yellow}${cmsg_InstCommand[$LC_DEFAULT]} '${cyan}${missing[*]}${reset}' ?"; then
				if LC_ALL=C xbps-install -Sy "${missing[@]}"; then
					errorFound=0
					sh_checkDependencies
				else
					die "${cmsg_RunNewErro[$LC_DEFAULT]}"
				fi
			fi
		else
			die "${cmsg_ERRO[$LC_DEFAULT]}: ${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..."
		fi
	fi
}

sh_setVarColors() {
	# does the terminal support true-color?
	if [[ -n "$(command -v "tput")" ]]; then
		#tput setaf 127 | cat -v  #capturar saida
		# Definir a variável de controle para restaurar a formatação original
		reset=$(tput sgr0)

		# Definir os estilos de texto como variáveis
		bold=$(tput bold)
		underline=$(tput smul)   # Início do sublinhado
		nounderline=$(tput rmul) # Fim do sublinhado
		reverse=$(tput rev)      # Inverte as cores de fundo e texto

		# Definir as cores ANSI como variáveis
		black=$(tput bold)$(tput setaf 0)
		red=$(tput bold)$(tput setaf 196)
		green=$(tput bold)$(tput setaf 2)
		yellow=$(tput bold)$(tput setaf 3)
		blue=$(tput setaf 4)
		pink=$(tput setaf 5)
		magenta=$(tput setaf 5)
		cyan=$(tput setaf 6)
		white=$(tput setaf 7)
		gray=$(tput setaf 8)
		orange=$(tput setaf 202)
		purple=$(tput setaf 125)
		violet=$(tput setaf 61)
		light_red=$(tput setaf 9)
		light_green=$(tput setaf 10)
		light_yellow=$(tput setaf 11)
		light_blue=$(tput setaf 12)
		light_magenta=$(tput setaf 13)
		light_cyan=$(tput setaf 14)
		bright_white=$(tput setaf 15)
	else
		sh_unsetVarColors
	fi
}

sh_unsetVarColors() {
	unset reset green red bold blue cyan
	unset orange pink white yellow violet purple
	sh_setLogPrefix
}

sh_setLogPrefix() {
	COL_NC='\e[0m' # No Color
	COL_LIGHT_GREEN='\e[1;32m'
	COL_LIGHT_RED='\e[1;31m'
	TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}$white]"
	INFO="[i]"
	# shellcheck disable=SC2034
	DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
	OVER="\\r\\033[K"
	NORMAL="${reset}"
	SUCCESS="${green}"
	WARNING="${yellow}"
	FAILURE="${red}"
	INFO="${cyan}"
	BRACKET="${blue}"
	BMPREFIX=""
	DOTPREFIX="  ${blue}::${reset} "
	#  SUCCESS_PREFIX="${SUCCESS}  ↑  ${NORMAL}"
	SUCCESS_PREFIX=" $TICK "
	SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
	#  FAILURE_PREFIX="${FAILURE}  ↓  ${NORMAL}"
	FAILURE_PREFIX=" $CROSS "
	FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
	WARNING_PREFIX="${WARNING}  W  ${NORMAL}"
	WARNING_SUFFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"
	SKIP_PREFIX="${INFO}  S  ${NORMAL}"
	SKIP_SUFFIX="${BRACKET}[${INFO} SKIP ${BRACKET}]${NORMAL}"
	WAIT_PREFIX="${WARNING}  R  ${NORMAL}"
	WAIT_SUFFIX="${BRACKET}[${WARNING} WAIT ${BRACKET}]${NORMAL}"
}

replicate() {
	local Var
	printf -v Var %"$2s" " "
	echo "${Var// /$1}"
}

padr() {
	text=$1
	COLS=$2
	char=$3
	if test $# -eq 1; then
		COLS=$(tput cols)
		char='='
	fi
	printf "%*s\n" "$COLS" "$text" | sed "s/ /$char/g"
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
}

msg() {
	((++ncounter))
	cinfo="$1"
	cfmt="$(fmt)"
	ufmt=$(unfmt "$cfmt")
	last_msg="$2"
	logmessage="$ufmt $last_msg"
	logmessage=${logmessage/INFO /}
#	notify-send "${ccabec}" "${logmessage}"
	printf "%s\n" "$(timespec) [ $cinfo ]$ufmt ${logmessage}" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER

	if ((grafico)); then
		logmessage="$last_msg"
		${DIALOG} \
			--no-collapse \
			--colors \
			--title "$cinfo" \
			--backtitle "$ccabec" \
			--infobox "\nStep:${BOLD}${YELLOW}${ufmt} ${RESET}${BOLD}$logmessage" \
			8 100
	else
		log_info_msg "$(fmt) ${last_msg}"
	fi
}

fmt() {
#	printf "${bold}${yellow}%03d/%03d${reset}" "$ncounter" "$njobs"
	printf "${bold}${yellow}%03d/%03d${reset}" "$njobs" "$ncounter"
	return $?
}

mensagem() {
	cinfo="$1"
	last_msg="$2"
	${DIALOG} \
		--no-collapse \
		--colors \
		--title "$cinfo" \
		--backtitle "$ccabec" \
		--infobox "$last_msg" \
		8 100
}

unfmt() {
	local last_msg="$*"
	logmessage="${last_msg/${bold}${yellow}/}"
	logmessage="${logmessage/${reset}/}"
	echo "$logmessage"
}

log_info_msg() {
	last_msg="$*"

	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${*}"
	fi
	return 0
}

log_info_msg_level() {
	last_msg="$*"

	if ! ((quiet)); then
		echo -n -e "   ${BMPREFIX}${*}"
	fi
	return 0
}

log_error() {
	if ! ((quiet)); then
		echo -e "   ${FAILURE_PREFIX}${*}"
	fi
	return 0
}

log_msg_tab() {
	if ! ((quiet)); then
		echo -e "   ${DOTPREFIX}${*}"
	fi
	return 0
}

log_msg() {
	if ! ((quiet)); then
		echo -e "${DOTPREFIX}${*}"
	fi
	return 0
}

evaluate_retval() {
	local error_value="$?"
	local error_fatal="$2"
	local cmsgdie="$3"
	local level="$4"

	[[ -z "$error_fatal" ]] && error_fatal=$true

	if [[ $# -gt 0 ]]; then
		error_value="$1"
	fi

	if [[ "${error_value}" = 0 ]]; then
		if [[ -n "${level}" ]]; then
			log_success_msg_level ''
		else
			log_success_msg ''
		fi
	else
		if [[ -n "${level}" ]]; then
			log_failure_msg_level ''
		else
			log_failure_msg ''
		fi
	fi

	if ((error_value)); then
		if ((error_fatal)); then
			[[ -z "$cmsgdie" ]] && die "${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..." || die "$cmsgdie"
		else
	    [[ -n "$cmsgdie" ]] && log_failure_msg_level "${cmsgdie}"
			log_error "${cmsg_Error_not_fatal[LC_DEFAULT]} $BOOTLOG"
		fi
	fi
	[[ -n "$cmsgdie" ]] && log_success_msg_level "${cmsgdie}"
	return "${error_value}"
}

log_failure_msg_level() {
	if ! ((quiet)) && ! ((grafico)); then
		echo -n -e "     ${BMPREFIX}${@}"
		echo -e "   ${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
	fi
	logmessage=${last_msg/$bold$red$green$yellow/}
	printf "%s\n" "$(timespec) [ FAIL ]${logmessage}" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	replicate "#" "100" | tee -i -a "$BOOTLOG" >$LOGGER
	return 0
}

log_success_msg_level() {
	if ! ((quiet)) && ! ((grafico)); then
		echo -n -e "     ${BMPREFIX}${@}"
		echo -e "   ${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
	fi
	logmessage=$(unfmt "$last_msg")
	printf "%s\n" "$(timespec) [  OK  ]${logmessage}" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	replicate "#" "100" | tee -i -a "$BOOTLOG" >$LOGGER
	return 0
}

log_failure_msg() {
	if ! ((quiet)) && ! ((grafico)); then
		echo -n -e "${BMPREFIX}${@}"
		echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
	fi
	logmessage=${last_msg/$bold$red$green$yellow/}
	printf "%s\n" "$(timespec) [ FAIL ]${logmessage}" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	replicate "#" "100" | tee -i -a "$BOOTLOG" >$LOGGER
	return 0
}

log_success_msg() {
	if ! ((quiet)) && ! ((grafico)); then
		echo -n -e "${BMPREFIX}${@}"
		echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
	fi
	logmessage=$(unfmt "$last_msg")
	printf "%s\n" "$(timespec) [  OK  ]${logmessage}" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	replicate "#" "100" | tee -i -a "$BOOTLOG" >$LOGGER
	return 0
}

timespec() {
	STAMP="$(date +"%b %d %T %:z") $(hostname)"
	echo "$STAMP"
	return 0
}

die() {
	if test $# -ge 2; then
		evaluate_retval 1
	fi
	local msg=$1
	shift
	printf "%-75s\n" "$(DOT)${bold}${red}$msg${reset}" >&2
	sh_enablePrintk
	exit 1
}

function debug() {
	whiptail \
		--fb \
		--clear \
		--backtitle "[debug]$0" \
		--title "[debug]$0" \
		--yesno "${*}\n" \
		0 40
	result=$?
	if ((result)); then
		exit
	fi
	return $result
}

info() {
	msg "${fmt} $@"
	evaluate_retval "0"

	${DIALOG} \
		--colors \
		--title "$1" \
		--backtitle "$ccabec" \
		--ok-label "${cmsg_ok[$LC_DEFAULT]}" \
		--msgbox "$2\n$3\n$4\n$5\n$6\n$7" \
		0 0
}

alerta() {
	msg "${fmt} $@"
	evaluate_retval "0"

	${DIALOG} \
		--colors \
		--clear \
		--no-collapse \
		--no-cr-wrap \
		--title "$1" \
		--backtitle "$ccabec" \
		--ok-label "${cmsg_ok[$LC_DEFAULT]}" \
		--msgbox "\n$2\n$3\n$4\n$5\n$6" \
		10 81
}

readconf() {
	if [[ $LC_DEFAULT -eq 0 ]]; then
		read -r -p "$@ [S/n]"
	else
		read -r -p "$@ [Y/n]"
	fi
	[[ ${REPLY^} == "" ]] && return $false
	[[ ${REPLY^} == N ]] && return $true || return $false
}

conf() {
	xtitle="$1"
	shift
	${DIALOG} \
		--colors \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--no-collapse \
		--no-cr-wrap \
		--clear \
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		0 0
	nchoice=$?
	return "$nchoice"
}

infoconf() {
	infotitle=$1
	inforesult=$2
	conftitle=$3
	shift 3
	${DIALOG} --title "$infotitle" \
		--begin 05 10 --infobox "$inforesult" 14 75 \
		--and-widget \
		--begin 20 10 \
		--colors \
		--no-collapse \
		--no-cr-wrap \
		--title "$conftitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		10 75
	nchoice=$?
	return "$nchoice"
}

display_result() {
	${DIALOG} \
		--colors \
		--title "$2" \
		--backtitle "$ccabec" \
		--no-collapse \
		--no-cr-wrap \
		--no-nl-expand \
		--ok-label "${cmsg_ok[$LC_DEFAULT]}" \
		--msgbox "$1" \
		0 0
}

#			15 100

notconf() {
	xtitle="$1"
	shift
	${DIALOG} \
		--colors \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		10 100
	return $?
}

sh_testDisk() {
	local result=0

	fdisk -l "$_DEVICE" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	result="${PIPESTATUS[0]}"
	if ! ((quiet)); then
		evaluate_retval "$result"
	fi
	return "$result"
}

sh_mkparted() {
	local nchoice=$false
	local withswap=$true
	local label_type='gpt'
	local ext=$(sh_getNvme)
	local cini=''
	local cpart=''
	local CSCRIPT=''

	last_msg="${cmsg_TestandoDisco[$LC_DEFAULT]} ${_DEVICE}"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	if ! sh_testDisk; then
		die "${cmsg_ErroLeituraDisco[$LC_DEFAULT]}: $_DEVICE."
	fi

	if ! ((grafico)); then
		if ! ((quiet)); then
			replicate "=" "$COLUMNS"
			if ! fdisk -l "$_DEVICE"; then
				die "${cmsg_ErroLeituraDisco[$LC_DEFAULT]}: $_DEVICE."
			fi
			replicate "=" "$COLUMNS"
			if ! ((LMKPARTED)); then
				echo "${yellow}${cwarning[$LC_DEFAULT]} ${red}${cmsg_todos_os_dados_serao_perdidos[$LC_DEFAULT]}${reset}"
			fi
		fi
	fi

	if ((LMKPARTED)); then
		return 0
	fi

	if ! ((grafico)); then
		if readconf "${red}${cmsg_ContinuarParticionamento[$LC_DEFAULT]} ${yellow}${_DEVICE} ${reset}?"; then
			nchoice=$true
		fi
	else
		if [[ $(sh_toBytes "$(sh_splitarray "${AARRAY_DSK_DEVICES[$_DEVICE]}" 2)") -lt $(sh_toBytes "4G") ]]; then
			if ! infoconf "${cmsg_Disco[$LC_DEFAULT]}" "$(fdisk -l "$_DEVICE")" \
				"${YELLOW}${cmsg_CriandoParticoes[$LC_DEFAULT]} ${_DEVICE}" \
				"\n${cmsg_TamanhoInsuficiente[$LC_DEFAULT]}\n${cmsg_DesejaProsseguir[$LC_DEFAULT]}"; then
				return 1
			fi
			withswap=$false
		else
			if ! infoconf "${cmsg_Disco[$LC_DEFAULT]}" "$(fdisk -l "$_DEVICE")" \
				"${YELLOW}${cmsg_CriandoParticoes[$LC_DEFAULT]} ${_DEVICE}" \
				"\n${cmsg_DesejaCriarParticaoSwap[LC_DEFAULT]}"; then
				withswap=$false
			fi
		fi

		if ! conf "${YELLOW}${cwarning[$LC_DEFAULT]}" \
			"DEVICE  : ${RED}$_DEVICE${RESET}\n" \
			"MODEL  : ${RED}$MODEL_ORIGEM${RESET}\n" \
			"\n${RED}${cmsg_todos_os_dados_serao_perdidos[$LC_DEFAULT]}${RESET}" \
			"\n${cmsg_ContinuarParticionamento[$LC_DEFAULT]} ${_DEVICE} ?\n"; then
			return 1
		fi
		nchoice=$true
	fi

	if ((nchoice)); then
		last_msg="${cmsg_CriandoParticoes[$LC_DEFAULT]} ${_DEVICE}"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"

		Amntpoint=()
		[[ "$_DISKTABLE" = "EFI" || "$_DISKTABLE" = "GPT_BIOS" ]] && label_type='gpt' || label_type='msdos'
		CSCRIPT+="mklabel $label_type "
		if [[ "$label_type" = "gpt" ]]; then
			CSCRIPT+='mkpart primary fat32 1MiB   2MiB set 1 bios_grub on name 1 BIOS '
			CSCRIPT+='mkpart primary fat32 2MiB 258MiB set 2 esp on       name 2 EFI  '
			#			Amntpoint+=(["$_DEVICE${ext}1"]="||0")
			Amntpoint+=(["$_DEVICE${ext}2"]="/boot/efi|vfat|1")
			cini='258MiB'
			cpart='3'
			if ((withswap)); then
				CSCRIPT+="mkpart primary linux-swap $cini 3G name $cpart SWAP "
				Amntpoint+=(["$_DEVICE${ext}$cpart"]="none|swap|1")
				cini='3G'
				cpart='4'
			fi
			CSCRIPT+="mkpart primary $cini 100% name $cpart ROOT "
			Amntpoint+=(["$_DEVICE${ext}$cpart"]="/|ext4|1")
		else
			cini='1MiB'
			cpart='1'
			if ((withswap)); then
				CSCRIPT+="mkpart primary linux-swap $cini 3G "
				Amntpoint+=(["$_DEVICE${ext}$cpart"]="none|swap|1")
				cini='3G'
				cpart='2'
			fi
			CSCRIPT+="mkpart primary $cini 100% set $cpart boot on "
			Amntpoint+=(["$_DEVICE${ext}$cpart"]="/|ext4|1")
		fi
		CSCRIPT+='align-check optimal 1'
		parted --script "$_DEVICE" -- "$CSCRIPT" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		evaluate_retval="${PIPESTATUS[0]}"
		parted --script "$_DEVICE" -- print 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		Amkfs+=(["vfat"]="mkfs.vfat")
		Amkfs+=(["swap"]="mkswap")
		Amkfs+=(["ext4"]="mkfs.ext4")
		LMKPARTED=$true
		LFS=$true
		LPARTITION=$true
		#		sync 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		#		partprobe 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	else
		die "${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..."
	fi
}

sh_update_mirror() {
	last_msg="${cmsg_Configurando[$LC_DEFAULT]} ${cmsg_Mirror[$LC_DEFAULT],,} ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	cat >"$dir_install/etc/xbps.d/00-repository-main.conf" <<-EOF
		repository=${url_mirror}current
		repository=${url_mirror}current/nonfree
		repository=${url_mirror}current/multilib
		repository=${url_mirror}current/multilib/nonfree

		#repository=http://void.chililinux.com/voidlinux/current
		#repository=http://void.chililinux.com/voidlinux/current/extras
		#repository=http://void.chililinux.com/voidlinux/current/nonfree
		#repository=http://void.chililinux.com/voidlinux/current/multilib
		#repository=http://void.chililinux.com/voidlinux/current/multilib/nonfree

		repository=https://void.chililinux.com/voidlinux/current
		#repository=https://void.chililinux.com/voidlinux/current/extras
		#repository=https://void.chililinux.com/voidlinux/current/nonfree
		#repository=https://void.chililinux.com/voidlinux/current/multilib
		#repository=https://void.chililinux.com/voidlinux/current/multilib/nonfree
	EOF
	evaluate_retval "$?"
}

sh_update_sshd() {
	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} sshd_config ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	cat >>"$dir_install"/etc/ssh/sshd_config <<-EOF
		KbdInteractiveAuthentication Yes
		X11Forwarding Yes
		PermitRootLogin Yes
		PubkeyAuthentication Yes
		PubkeyAcceptedKeyTypes=+ssh-rsa
		AuthorizedKeysFile      .ssh/authorized_keys
		PasswordAuthentication Yes
		ChallengeResponseAuthentication Yes
		UsePAM yes
	EOF
	evaluate_retval "$?" "$err_not_fatal"
}

sh_update_locale() {
	local lc="${LOCALE}.UTF-8"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} locales ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	#sed -e "/en_US.UTF-8 UTF-8/s/^\#//" -i "$dir_install/etc/default/libc-locales"
	sed -e "s|#\?en_US.UTF-8 UTF-8|#en_US.UTF-8 UTF-8|g" -i "$dir_install/etc/default/libc-locales"
	sed -e "/$lc UTF-8/s/^\#//" -i "$dir_install/etc/default/libc-locales"
	evaluate_retval "$?" "$err_not_fatal"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} locale.conf ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	cat >"$dir_install/etc/locale.conf" <<-EOF
		LANG=$lc
		LANGUAGE=$lc
		LC_COLLATE=C
		LC_ALL=$lc
	EOF
	evaluate_retval "$?" "$err_not_fatal"
}

sh_update_hostname() {
	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} hostname ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	echo "${AsUser[chostname]}" >"$dir_install/etc/hostname"
	evaluate_retval "$?" "$err_not_fatal"
}

sh_update_rc_local() {
	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} rc.local ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	cat >"$dir_install"/etc/rc.local <<-EOF
		#HOSTNAME="${AsUser[chostname]}"
		#HARDWARECLOCK="${AConfLocale[_CLOCK]}"
		#TIMEZONE="${AConfLocale[_TIMEZONE]}"
		#KEYMAP="${AConfLocale[_KEYMAP]}"
		#hwclock --systohc
	EOF
	evaluate_retval "$?" "$err_not_fatal"
}

#HOSTNAME="${AsUser[chostname]}"

sh_update_rc_conf() {
	local cfile_rc="$dir_install/etc/rc.conf"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} hostname ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	[[ ! -e "$cfile_rc" ]] && >|"$cfile_rc"
	if [[ -e "$cfile_rc" ]]; then
		sed -i -e "s|HOSTNAME=.*|HOSTNAME=${AsUser[chostname]}|g" "$cfile_rc"
		sed -i -e "s|#\?HOSTNAME=.*|HOSTNAME=${AsUser[chostname]}|g" "$cfile_rc"
	fi
	evaluate_retval "$?" "$err_not_fatal"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} hardware clock ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	[[ ! -e "$cfile_rc" ]] && >|"$cfile_rc"
	if [[ -e "$cfile_rc" ]]; then
		sed -i -e "s|HARDWARECLOCK=.*|HARDWARECLOCK=${AConfLocale[_CLOCK]}|g" "$cfile_rc"
		sed -i -e "s|#\?HARDWARECLOCK=.*|HARDWARECLOCK=${AConfLocale[_CLOCK]}|g" "$cfile_rc"
	fi
	evaluate_retval "$?" "$err_not_fatal"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} console font ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	[[ ! -e "$cfile_rc" ]] && >|"$cfile_rc"
	if [[ -e "$cfile_rc" ]]; then
		sed -i -e "s|FONT=.*|FONT=${AConfLocale[_FONT]}|g" "$cfile_rc"
		sed -i -e "s|#\?FONT=.*|FONT=${AConfLocale[_FONT]}|g" "$cfile_rc"
	fi
	evaluate_retval "$?" "$err_not_fatal"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} ${cmsg_Teclado[$LC_DEFAULT],,} ${AConfLocale[_KEYMAP]} ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	[[ ! -e "$cfile_rc" ]] && >|"$cfile_rc"
	if [[ -e "$cfile_rc" ]]; then
		sed -i -e "s|KEYMAP=.*|KEYMAP=${AConfLocale[_KEYMAP]}|g" "$cfile_rc"
		sed -i -e "s|#\?KEYMAP=.*|KEYMAP=${AConfLocale[_KEYMAP]}|g" "$cfile_rc"
	fi
	evaluate_retval "$?" "$err_not_fatal"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} timezone pass1 ${cmsg_Em[$LC_DEFAULT]} $cfile_rc"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	[[ ! -e "$cfile_rc" ]] && >|"$cfile_rc"
	if [[ -e "$cfile_rc" ]]; then
		sed -i -e "s|TIMEZONE=.*|TIMEZONE=${AConfLocale[_TIMEZONE]}|g" "$cfile_rc"
		sed -i -e "s|#\?TIMEZONE=.*|TIMEZONE=${AConfLocale[_TIMEZONE]}|g" "$cfile_rc"
	fi
	evaluate_retval "$?" "$err_not_fatal"
	sh_chroot_job "${cmsg_Ajustando[$LC_DEFAULT]} timezone pass2 ${cmsg_Em[$LC_DEFAULT]} $dir_install" "ln -sf /usr/share/zoneinfo/${AConfLocale[_TIMEZONE]} /etc/localtime" "$err_not_fatal"
}

install_skel_user() {
    local aname=('config-common')
    local x

	for x in "${_WINDOWMANAGER[@]}"; do
		case "$x" in
		"tty") : ;;
		"awesome")			aname+=(config-awesome);;
		"bspwm") 			aname+=(config-bspwm);;
		"blackbox")			aname+=(config-blackbox);;
		"dwm") 				aname+=(config-dwm);;
		"enlightenment")	aname+=(config-enlightenment);;
		"fluxbox")			aname+=(config-fluxbox);;
		"gnome")			aname+=(config-gnome);;
		"hyprland")			aname+=(config-hyprland);;
		"i3wm")				aname+=(config-i3wm);;
		"lxde")				aname+=(config-lxde);;
		"lxqt")				aname+=(config-lxqt);;
		"mate")				aname+=(config-mate);;
		"openbox")			aname+=(config-openbox);;
		"plasma")			aname+=(config-plasma);;
		"sway")				aname+=(config-sway);;
		"twm")				aname+=(config-twm);;
		"xfce4")			aname+=(config-xfce);;
		esac
	done

    #skel
	for path in "${aname[@]}"; do
		if [[ -d "$path" ]]; then
			cp -RLf $path/. "$dir_install/" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
        fi
    done
	cp -RLf config-common/etc/skel/. "$dir_install/root/" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
    return 0
}

sh_update_bashrc() {
	if $LCUSTOM; then
		last_msg="${cmsg_Ajustando[$LC_DEFAULT]} bashrc ${cmsg_Em[$LC_DEFAULT]} $dir_install"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
		install_skel_user
		evaluate_retval "$?" "$err_not_fatal"
	fi
}

sh_update_wpa_suplicant() {
	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} wpa_supplicant.conf ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	[[ ! -e $dir_install/etc/wpa_supplicant/wpa_supplicant.conf ]] && >|$dir_install/etc/wpa_supplicant/wpa_supplicant.conf
	if [[ -f $dir_install/etc/wpa_supplicant/wpa_supplicant.conf ]]; then
		cat >"$dir_install/etc/wpa_supplicant/wpa_supplicant.conf" <<EOF
ctrl_interface=/run/wpa_supplicant
ctrl_interface_group=wheel
update_config=1
fast_reauth=1

network={
   ssid=P"$_WIFI_NETWORK"
   psk="$_WIFI_PASSWORD"
   mesh_fwding=1
}
EOF
	fi
	evaluate_retval "$?" "$err_not_fatal"
}

sh_update_console() {
	local cfile="/etc/default/grub"
	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} console grub ${cmsg_Em[$LC_DEFAULT]} $dir_install$cfile"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	if [[ -e "$dir_install$cfile" ]]; then
		sed -i "$dir_install/$cfile" \
			-e 's|#\(GRUB_TERMINAL_INPUT\).*|\1=console|' \
			-e 's|#\(GRUB_TERMINAL_OUTPUT\).*|\1=console|'
	fi
	evaluate_retval "$?" "$err_not_fatal"
}

sh_update_Xkeymap() {
	if [[ "${AConfLocale[_KEYMAP]}" != 'br-abnt2' ]]; then
		return 0
	fi
	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} ${cmsg_Teclado[$LC_DEFAULT],,} ${AConfLocale[_KEYMAP]} (X11) ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	[[ ! -d "$dir_install/etc/X11/xorg.conf.d" ]] && mkdir -p "$dir_install/etc/X11/xorg.conf.d"
	[[ ! -e "$dir_install/etc/X11/xorg.conf.d/10-keyboard.conf" ]] && cat >"$dir_install/etc/X11/xorg.conf.d/10-keyboard.conf" <<-EOF
		Section "InputClass"
			Identifier "Keyboard Br Abnt2"
			MatchIsKeyboard "on"
			Option "XkbModel" "pc105"
			Option "XkbLayout" "br"
			Option "XkbVariant" "abnt2"
			Option "XKbOptions" ""
		EndSection
	EOF
	evaluate_retval "$?" "$err_not_fatal"
}

sh_check_util_fs() {
	for i in "${!Amkfs[@]}"; do
		cmdsearch="${Amkfs[$i]}"
		if [[ -z $(command -v "$cmdsearch") ]]; then
			result="\n${RED}${cmsg_ERRO[$LC_DEFAULT]}${RESET}: ${cmsg_CommandNotFound[$LC_DEFAULT]} ${BOLD}${CYAN}'$cmdsearch'${RESET}"
			result+="\n--------------${cmsg_ImpossivelContinuar[$LC_DEFAULT]}-------------"
			result+="\n${cmsg_ImpossivelContinuar1[$LC_DEFAULT]}"
			result+="\n${cmsg_ImpossivelContinuar2[$LC_DEFAULT]} \$PATH"
			result+="\n-----------------------------------------------"
			display_result "$result" "${cmsg_CommandNotFound[$LC_DEFAULT]}"
			die "${cmsg_ERRO[$LC_DEFAULT]}: ${cmsg_InstalacaoAbortada[$LC_DEFAULT]}... ${cmsg_CommandNotFound[$LC_DEFAULT]} ${bold}${cyan}'$cmdsearch'${reset}"
			return 1
		fi
	done
	return 0
}

sh_make_fs() {
	local i
	local _PART
	local format
	local fstype

	sh_check_util_fs
	for i in "${!Amntpoint[@]}"; do
		_PART="$i"
		fstype="$(sh_splitarray "${Amntpoint[$i]}" 2)"
		format="$(sh_splitarray "${Amntpoint[$i]}" 3)"

		if [[ "$format" = "1" ]]; then
			last_msg="${cmsg_FormatandoParticao[$LC_DEFAULT]} ${_PART} FS ${fstype,,}"
			msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
			declare -A fsparms=(
				[ext2]="-F   -L VOID"
				[ext3]="-F   -L VOID"
				[ext4]="-F   -L VOID"
				[btrfs]="-f   -L VOID"
				[f2fs]="-f   -l VOID"
				[xfs]="-f   -L VOID"
				[jfs]="-f   -L VOID"
				[vfat]="-F32 -n EFI"
				[reiserfs]="-f   -l VOID"
			)
			if [[ "$fstype" = "swap" ]]; then
				mkswap "$_PART" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
			else
				mkfs.$fstype ${fsparms[$fstype]} $_PART 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
			fi
			evaluate_retval "${PIPESTATUS[0]}"
		fi
	done

	if ((LVM)); then
		sh_make_fsLvm
	fi
}

sh_umount_fs() {
	last_msg="${cmsg_DismountFileSystem[$LC_DEFAULT]} ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	umount -frl "$dir_install" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	LBIND=$false
	evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"
}

sh_stop_mount() {
	local nchoice
	last_msg="${cmsg_umount_partition[$LC_DEFAULT]}"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	umount -rl "$dir_install" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	nchoice="${PIPESTATUS[0]}"
	evaluate_retval 0
	[[ $nchoice -eq 0 || $nchoice -eq 32 ]] && LMOUNT=$false
	[[ $LMOUNT -eq $false ]] && return 0 || return 1
}

sh_ignore_error() {
	"$@" 2>/dev/null
	return 0
}

sh_chroot_maybe_add_mount() {
	local cond=$1
	shift
	if eval "$cond"; then
		sh_mount_bind "$@"
	fi
}

sh_mount_bind() {
	mount "$@" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

sh_init_bind() {
	local nchoice

	if ! ((LBIND)); then
		last_msg="${cmsg_MontandoAmbiente[$LC_DEFAULT]} chroot"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
		for i in /proc /sys /dev /dev/pts /dev/shm /run /tmp; do
			mkdir -p "$dir_install$i" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		done

		sh_mount_bind proc "${dir_install}/proc" -t proc -o nosuid,noexec,nodev &&
			sh_mount_bind sys "${dir_install}/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
			sh_ignore_error sh_chroot_maybe_add_mount "[[ -d '$dir_install/sys/firmware/efi/efivars' ]]" \
				efivarfs "$dir_install/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
			sh_mount_bind udev "${dir_install}/dev" -t devtmpfs -o mode=0755,nosuid &&
			sh_mount_bind devpts "${dir_install}/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
			sh_mount_bind shm "${dir_install}/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
			sh_mount_bind /run "${dir_install}/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
			sh_mount_bind tmp "${dir_install}/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
		evaluate_retval
		nchoice=$?
		[[ $nchoice -eq 0 ]] && LBIND=$true
	fi
	[[ $LBIND -eq $true ]] && return 0 || return 1
}

sh_stop_bind() {
	local nchoice

	last_msg="${cmsg_DesMontandoAmbiente[$LC_DEFAULT]} chroot"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	{
		umount -r "${dir_install}/proc"
		umount -r "${dir_install}/sys"
		umount -r "$dir_install/sys/firmware/efi/efivars"
		umount -r "${dir_install}/dev/shm"
		umount -r "${dir_install}/dev/pts"
		umount -r "${dir_install}/dev"
		umount -r "${dir_install}/run"
		umount -r "${dir_install}/tmp"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	nchoice="${PIPESTATUS[0]}"
	evaluate_retval 0

	[[ $nchoice -eq 0 ]] && LBIND=$false
	[[ $LBIND -eq $false ]] && return 0 || return 1
}

sh_cmd_job() {
	local cmsg="$1"
	local cjob="$2"
	local erro_fatal="$3"
	local lretval=0

	last_msg="$cmsg"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	#	eval "$cjob" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	if ((grafico)); then
		eval "$cjob" 2>&1 | tee -i -a "$BOOTLOG" | dialog --colors --backtitle "$cmsg" --title "$cmsg" --begin 10 50 --progressbox 24 120 --and-widget
	else
		eval "$cjob" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	fi
	lretval="${PIPESTATUS[0]}"
	evaluate_retval "$lretval" "$erro_fatal"
	shell='/bin/sh'
	return "$lretval"
}

sh_chroot_job() {
	local cmsg="$1"
	local cjob="$2"
	local erro_fatal="$3"
	local level="$4"
	local lretval=0

	last_msg="$cmsg"
	if [[ -n "$level" ]]; then
		msg "INFO" "$last_msg" "$(log_info_msg_level "$last_msg")"
	else
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	fi
	if ((grafico)); then
		chroot "$dir_install" "$shell" -c "$cjob" 2>&1 | tee -i -a "$BOOTLOG" |
			dialog --colors --backtitle "$ccabec" --title "${YELLOW}Step:$ufmt ${RED}==> ${RESET}[$logmessage] ${BOLD}${WHITE}[$(sh_time_elapsed)]" --progressbox $(($MAXROW / 2)) $(($MAXCOL - 20))
	else
		chroot "$dir_install" "$shell" -c "$cjob" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	fi
	lretval="${PIPESTATUS[0]}"
	evaluate_retval "$lretval" "$erro_fatal" "" "$level"
	shell='/bin/sh'
	return "$lretval"
}

sh_make_user() {
	local user="${AsUser[cuser]}"

	if [[ -n "${AsUser[cuser]}" ]]; then
		if [[ -n "${AsUser[cfullname]}" ]]; then
			sh_chroot_job "${cmsg_CriandoUsuario[$LC_DEFAULT]}: ${AsUser[cuser]} - ${AsUser[cfullname]}" "useradd -m ${AsUser[cuser]} -G ${AsUser[cgroups]} -p ${AsUser[cpass]} -c '${AsUser[cfullname]}'"
		else
			sh_chroot_job "${cmsg_CriandoUsuario[$LC_DEFAULT]}: ${AsUser[cuser]} - ${AsUser[cfullname]}" "useradd -m ${AsUser[cuser]} -G ${AsUser[cgroups]} -p ${AsUser[cpass]}"
		fi
		sh_chroot_job "${cmsg_AjustandoSenhaUsuario[$LC_DEFAULT]}: ${AsUser[cuser]}" "(echo ${AsUser[cuser]}:${AsUser[cpass]}) | chpasswd -m > /dev/null 2>&1"
	fi

	if [[ -n "${AsUser[cpassroot]}" ]]; then
		sh_chroot_job "${cmsg_AjustandoSenhaUsuario[$LC_DEFAULT]}: root" "(echo root:${AsUser[cpassroot]}) | chpasswd -m > /dev/null 2>&1"
		sh_chroot_job "${cmsg_AtivandoBashUsuario[$LC_DEFAULT]}: root" "chsh -s /bin/bash root"
	fi

	sh_update_sudoers
}

sh_update_sudoers() {
	local user="${AsUser[cuser]}"

	if [ -d $dir_install/etc/sudoers.d ]; then
		echo "# Enable sudo for login '$user'" >"$dir_install/etc/sudoers.d/$user"
		echo "$user ALL=(ALL:ALL) NOPASSWD: ALL" >>"$dir_install/etc/sudoers.d/$user"
		echo "# enable the sudoers entry for members of group wheel" >"$dir_install/etc/sudoers.d/wheel"
		echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" >>"$dir_install/etc/sudoers.d/wheel"
		unset user
	fi
}

sh_make_fstab() {
	local i
	local _part
	local label
	local fstype
	local format
	local size
	local mntpoint
	local fsorder=1

	if ! ((LVM)); then
		last_msg="${cmsg_Gerando[$LC_DEFAULT]} fstab pass1 ${cmsg_Em[$LC_DEFAULT]} $dir_install"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"

#		echo "tmpfs                                           /tmp           tmpfs            defaults,nosuid,nodev 0 0" >"$dir_install/etc/fstab"
		echo "tmpfs                                           /tmp           tmpfs            defaults,nosuid,nodev,noatime,mode=1777 0 0"  >"$dir_install/etc/fstab"
        echo "tmpfs                                           /var/log       tmpfs            defaults,noatime,mode=0755              0 0" >>"$dir_install/etc/fstab"
        echo "proc                                            /proc          proc             nodev,noexec,nosuid                     0 0" >>"$dir_install/etc/fstab"

		for i in "${!Amntpoint[@]}"; do
			_part="$i"
			mntpoint="$(sh_splitarray "${Amntpoint[$i]}" 1)"
			fstype="$(sh_splitarray "${Amntpoint[$i]}" 2)"
			format="$(sh_splitarray "${Amntpoint[$i]}" 3)"

			if [ "$fstype" = "f2fs" -o "$fstype" = "btrfs" -o "$fstype" = "xfs" -o "$fstype" = "reiserfs" ]; then
				fsorder=0
			fi
			if [ "$fstype" = "swap" ]; then
				echo "UUID=$(blkid -o value -s UUID "${_part}")  none          swap         none,nofail      0 0" >>"$dir_install/etc/fstab"
				continue
			fi
			if [ -n "$mntpoint" ]; then
			    if [ "$mntpoint" = '/boot/efi' ]; then
				    echo "UUID=$(blkid -o value -s UUID "${_part}")  ${mntpoint}   ${fstype,,}   defaults 0 2" >>"$dir_install/etc/fstab"
                else
#				    echo "UUID=$(blkid -o value -s UUID "${_part}")  ${mntpoint}   ${fstype,,}   defaults 0 $fsorder" >>"$dir_install/etc/fstab"
    				echo "UUID=$(blkid -o value -s UUID "${_part}")  ${mntpoint}   ${fstype,,}   defaults,noatime,discard,lazytime 0 $fsorder" >>"$dir_install/etc/fstab"
		        fi
			fi
		done
		evaluate_retval "$?"
	else
		last_msg="${cmsg_Gerando[$LC_DEFAULT]} fstab pass1 ${cmsg_Em[$LC_DEFAULT]} $dir_install"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"

		for i in "${!Amntpoint[@]}"; do
			_part="$i"
			mntpoint="$(sh_splitarray "${Amntpoint[$i]}" 1)"
			fstype="$(sh_splitarray "${Amntpoint[$i]}" 2)"
			format="$(sh_splitarray "${Amntpoint[$i]}" 3)"

			if [[ "$mntpoint" = "/boot/efi" ]]; then
				echo "UUID=$(blkid -o value -s UUID "${_part}")  ${mntpoint}   ${fstype,,}   defaults 0 $fsorder" >>"$dir_install/etc/fstab"
				break
			fi
		done

		for i in "${!AmntpointFDE[@]}"; do
			_part="$i"
			label="$(sh_splitarray "${AmntpointFDE[$i]}" 1)"
			fstype="$(sh_splitarray "${AmntpointFDE[$i]}" 2)"
			format="$(sh_splitarray "${AmntpointFDE[$i]}" 3)"
			size="$(sh_splitarray "${AmntpointFDE[$i]}" 4)"
			mntpoint="$(sh_splitarray "${AmntpointFDE[$i]}" 5)"
#			echo "UUID=$(blkid -o value -s UUID "${_part}")	$mntpoint	${fstype,,}	defaults 0 0" >>"$dir_install/etc/fstab"
			echo "UUID=$(blkid -o value -s UUID "${_part}")	$mntpoint	${fstype,,}	defaults,noatime,discard,lazytime 0 0" >>"$dir_install/etc/fstab"
		done
		evaluate_retval "$?"
	fi

	sh_chroot_job "${cmsg_Gerando[$LC_DEFAULT]} fstab pass2 ${cmsg_Em[$LC_DEFAULT]} $dir_install" \
		"sed 's/#.*//' /etc/fstab | column --table --table-columns SOURCES,DIR,TYPE,OPTIONS,DUMP,PASS --table-hide - >/tmp/fstab" "$err_not_fatal"
	sh_chroot_job "${cmsg_Gerando[$LC_DEFAULT]} fstab pass3 ${cmsg_Em[$LC_DEFAULT]} $dir_install" \
		"sed -i 's/SOURCES/#SOURCE/' /tmp/fstab" "$err_not_fatal"
	sh_chroot_job "${cmsg_Gerando[$LC_DEFAULT]} fstab pass4 ${cmsg_Em[$LC_DEFAULT]} $dir_install" \
		"cp /tmp/fstab /etc/fstab" "$err_not_fatal"
}

sh_activating_services() {
	local aServicesTTY=(agetty-tty1 agetty-tty2 agetty-tty3 agetty-tty4 agetty-tty5 agetty-tty6 udevd dhcpcd gpm acpid connmand)
		  aServicesTTY+=(wpa_supplicant uuidd dmeventd sshd dbus socklog-unix openntpd irqbalance avahi-daemon)
	local aServicesX=(NetworkManager dbus elogind lxdm polkitd bluetoothd)
	local service
	local level=2

	for service in "${aServicesTTY[@]}"; do
		sh_chroot_job 	"${cmsg_AtivandoServico[$LC_DEFAULT]} $service ${cmsg_Em[$LC_DEFAULT]} $dir_install" \
						"ln -sf /etc/sv/$service /etc/runit/runsvdir/current/" \
						"$err_not_fatal" \
						"$level"
	done

	if [[ $_ONLY_TTY -eq $false ]]; then
		for service in "${aServicesX[@]}"; do
			sh_chroot_job 	"${cmsg_AtivandoServico[$LC_DEFAULT]} $service ${cmsg_Em[$LC_DEFAULT]} $dir_install" \
							"ln -sf /etc/sv/$service /etc/runit/runsvdir/current/" \
							"$err_not_fatal" \
							"$level"
		done
	fi
}

sh_activating_pipewire() {
	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} pipewire ${cmsg_Em[$LC_DEFAULT]} $dir_install"
#	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"

    #Autostart pipewire
    sh_chroot_job "$last_msg" "ln -sf /usr/share/applications/pipewire.desktop /etc/xdg/autostart/pipewire.desktop" "$err_not_fatal"

    #Configure
    sh_chroot_job "$last_msg" "mkdir -p /etc/pipewire/pipewire.conf.d" "$err_not_fatal"
    sh_chroot_job "$last_msg" "ln -sf /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/" "$err_not_fatal"
    sh_chroot_job "$last_msg" "ln -sf /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/" "$err_not_fatal"
}

sh_mk_working_dir() {
	local cdir
	local adir=("$dir_install/boot"
		"$dir_install/boot/efi"
		"$dir_install/dev"
		"$dir_install/proc"
		"$dir_install/sys"
		"$dir_install/var/db/xbps/keys"
		"$dir_install/etc/xbps.d"
	)

	last_msg="${cmsg_CriandoDiretorios[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	for cdir in "${adir[@]}"; do
		[[ -d "$cdir" ]] || mkdir -p "$cdir"
	done
	evaluate_retval "$?"
}

sh_mount_fs() {
	local i
	local _part
	local mntpoint
	local fstype

	if ! ((LVM)); then
		for i in "${!Amntpoint[@]}"; do
			_part="$i"
			mntpoint="$(sh_splitarray "${Amntpoint[$i]}" 1)"
			if [[ -n "$mntpoint" && "$mntpoint" = "/" ]]; then
				last_msg="${cmsg_MontandoParticao[$LC_DEFAULT]} $_part ($mntpoint) ${cmsg_Em[$LC_DEFAULT]} $dir_install"
				msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
				mkdir -p "$dir_install"
				mount "$_part" "$dir_install"
				evaluate_retval "$?"
				break
			fi
		done
	else
		for i in "${!AmntpointFDE[@]}"; do
			_part="$i"
			label="$(sh_splitarray "${AmntpointFDE[$i]}" 1)"
			fstype="$(sh_splitarray "${AmntpointFDE[$i]}" 2)"
			format="$(sh_splitarray "${AmntpointFDE[$i]}" 3)"
			size="$(sh_splitarray "${AmntpointFDE[$i]}" 4)"
			mntpoint="$(sh_splitarray "${AmntpointFDE[$i]}" 5)"
			lvunit="${size: -1}"

			if [[ -n "$mntpoint" && "$mntpoint" = "/" ]]; then
				mkdir -p "$dir_install${mntpoint}"
				last_msg="${cmsg_MontandoParticao[$LC_DEFAULT]} ${_part} ($dir_install) ${cmsg_Em[$LC_DEFAULT]} $dir_install${mntpoint}"
				msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
				mount "${_part}" "$dir_install${mntpoint}"
				evaluate_retval "$?"
				break
			fi
		done

		for i in "${!AmntpointFDE[@]}"; do
			_part="$i"
			label="$(sh_splitarray "${AmntpointFDE[$i]}" 1)"
			fstype="$(sh_splitarray "${AmntpointFDE[$i]}" 2)"
			format="$(sh_splitarray "${AmntpointFDE[$i]}" 3)"
			size="$(sh_splitarray "${AmntpointFDE[$i]}" 4)"
			mntpoint="$(sh_splitarray "${AmntpointFDE[$i]}" 5)"
			lvunit="${size: -1}"

			[[ -n "$mntpoint" && "$mntpoint" = "/" || "$fstype" = "swap" ]] && continue

			mkdir -p "$dir_install${mntpoint}"
			last_msg="${cmsg_MontandoParticao[$LC_DEFAULT]} ${_part} ($dir_install) ${cmsg_Em[$LC_DEFAULT]} $dir_install${mntpoint}"
			msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
			mount "${_part}" "$dir_install${mntpoint}"
			evaluate_retval "$?"
		done
	fi

	for i in "${!Amntpoint[@]}"; do
		_part="$i"
		mntpoint="$(sh_splitarray "${Amntpoint[$i]}" 1)"
		fstype="$(sh_splitarray "${Amntpoint[$i]}" 2)"
		if [[ -n "$mntpoint" && "$mntpoint" = "/" ]]; then
			continue
		fi
		if [[ "$fstype" = "swap" ]]; then
			continue
		fi
		if [[ -n "$mntpoint" ]]; then
			last_msg="${cmsg_MontandoParticao[$LC_DEFAULT]} $_part ($mntpoint) ${cmsg_Em[$LC_DEFAULT]} $dir_install$mntpoint"
			msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
			mkdir -p "$dir_install${mntpoint}"
			mount "$_part" "$dir_install${mntpoint}"
			evaluate_retval "$?"
		fi
	done
}

sh_X11minimal() {
	local apkgs=()
	local aMedia=()

	if ! ((HYPRLAND)); then
		apkgs+=("${aXorg[@]}")
	fi
	apkgs+=("${aFont[@]}")
	apkgs+=("${aDisplaymanager[@]}")
	apkgs+=("${aTerminal[@]}")
	apkgs+=("${aFilemanager[@]}")
	apkgs+=("${aBrowser[@]}")
	apkgs+=("${aBluetooth[@]}")
	apkgs+=("${aNetworkX[@]}")
	apkgs+=("${aUtilityX[@]}")
	apkgs+=("${aIconsAndThemes[@]}")

    if [[ $_AUDIOSERVER = 'Pulseaudio' ]]; then
	    apkgs+=("${aPulseaudio[@]}")
	    aMedia+=("${aPulseaudio[@]}")
    else
	    apkgs+=("${aPipewire[@]}")
	    aMedia+=("${aPipewire[@]}")
    fi

	apkgs+=("${aPrinter[@]}")
	apkgs+=("${aPerfumery[@]}")
	apkgs+=("${aMicrocode[@]}")
	apkgs+=("${aArchiverX[@]}")
	apkgs+=("${aEditorX[@]}")

#	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} ${cmsg_Em[$LC_DEFAULT]} $dir_install"               "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
	if ! ((HYPRLAND)); then
		sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Xorg ${cmsg_Em[$LC_DEFAULT]} $dir_install"          "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aXorg[*]}"
	fi
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Font's ${cmsg_Em[$LC_DEFAULT]} $dir_install"        "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aFont[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Icons's ${cmsg_Em[$LC_DEFAULT]} $dir_install"       "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aIconsAndThemes[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} DM's ${cmsg_Em[$LC_DEFAULT]} $dir_install"          "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aDisplaymanager[*]}"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Terminal's ${cmsg_Em[$LC_DEFAULT]} $dir_install"    "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aTerminal[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} FileManager's ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aFilemanager[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Browser's ${cmsg_Em[$LC_DEFAULT]} $dir_install"     "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aBrowser[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Bluetooth's ${cmsg_Em[$LC_DEFAULT]} $dir_install"   "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aBluetooth[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Networks's ${cmsg_Em[$LC_DEFAULT]} $dir_install"    "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aNetworkX[*]}"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Utility's ${cmsg_Em[$LC_DEFAULT]} $dir_install"     "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aUtilityX[*]}"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Media's ${cmsg_Em[$LC_DEFAULT]} $dir_install"       "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aMedia[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Printer's ${cmsg_Em[$LC_DEFAULT]} $dir_install"     "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aPrinter[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Perfumery's ${cmsg_Em[$LC_DEFAULT]} $dir_install"   "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aPerfumery[*]}" "$err_not_fatal"
#	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Microde's ${cmsg_Em[$LC_DEFAULT]} $dir_install"     "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aMicrocode[*]}" "$err_not_fatal"
	sh_chroot_job "${cmsg_InstalandoMetaPacotes[$LC_DEFAULT]} Archivers's ${cmsg_Em[$LC_DEFAULT]} $dir_install"   "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${aArchiverX[*]}" "$err_not_fatal"
}

#dom 03 mar 2024 09:35:25 -04
sh_blackboxminimal() {
	local apkgs=(blackboxwm bbkeys)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Blackbox ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_fluxboxminimal() {
	local apkgs=(fluxbox fbmenugen cairo galculator-gtk2 gtk2-engines gtk-engine-murrine)
	      apkgs+=(wicd qt5ct qt5-styleplugins leafpad dconf volumeicon feh viewnior compton arc-theme ffmpegthumbnailer)

	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Fluxbox ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
	#	sh_chroot_job "${cmsg_Gerando[$LC_DEFAULT]} menu customizado do fluxbox em $dir_install" "fbmenugen -i -o /home/${AsUser[cuser]}/.fluxbox/menu" "$err_not_fatal"
	if [[ -f "$dir_install/home/${AsUser[cuser]}/.fluxbox/startup" ]]; then
		sed -e "/xmodmap/s//# xmodmap/" -i "$dir_install/home/${AsUser[cuser]}/.fluxbox/startup" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		if [[ "${AConfLocale[_KEYMAP]}" = 'br-abnt2' ]]; then
			sed -e '/\# xmodmap/a setxkbmap br -variant abnt2' -i "$dir_install/home/${AsUser[cuser]}/.fluxbox/startup" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		fi
	fi
}

sh_openboxminimal() {
	local apkgs=(openbox
			 	 obconf
			 	 )
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Openbox ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_plasmaminimal() {
	local apkgs=('plasma-desktop' 'plasma-nm' 'plasma-pa' 'plasma-disks')
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Plasma-Desktop ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_xfce4minimal() {
	local apkgs=(xfce4 Thunar thunar-volman elogind exo mousepad parole ristretto tumbler upower xdg-user-dirs-gtk xfce-polkit)
		  apkgs+=(xfce4-notifyd xfce4-panel xfce4-power-manager xfce4-screensaver xfce4-session xfce4-settings xfce4-taskmanager)
		  apkgs+=(xfce4-terminal xfconf xfdesktop xfwm4-themes xfwm4)

	if $LCUSTOM; then
		apkgs+=(xfce4-battery-plugin
				xfce4-clipman-plugin
				xfce4-cpufreq-plugin
				xfce4-cpugraph-plugin
				xfce4-datetime-plugin
				xfce4-screenshooter
				xfce4-dict
				xfce4-diskperf-plugin
				xfce4-fsguard-plugin
				xfce4-genmon-plugin
				xfce4-mailwatch-plugin
				xfce4-mpc-plugin
				xfce4-netload-plugin
				xfce4-pulseaudio-plugin
				xfce4-sensors-plugin
				xfce4-systemload-plugin
				xfce4-time-out-plugin
				xfce4-timer-plugin
				xfce4-verve-plugin
				xfce4-whiskermenu-plugin
				xfce4-weather-plugin
				xfce4-wavelan-plugin
				xfce4-xkb-plugin
				plank
			 )
      if sh_checkRepo 'https://chililinux.com/void/current'; then
        apkgs+=(chili-xfce-config)
        #apkgs+=(chili-void-xfce-skel)
      fi
	fi
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Xfce4 ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_gnomeminimal() {
	local apkgs=(gnome gnome-apps dconf-editor devhelp Endeavour evolution five-or-more four-in-a-row geary
		gedit ghex glade3 gnome-boxes gnome-builder gnome-chess gnome-connections
		gnome-games-collection gnome-klotski gnome-mahjongg gnome-mime-data gnome-multi-writer
		gnome-nettool gnome-nibbles gnome-robots gnome-sound-recorder gnome-sudoku
		gnome-taquin gnome-terminal gnome-tetravex gnome-tweaks gnome-usage hitori iagno lightsoff
		polari quadrapassel swell-foop sysprof tali gnome-backgrounds)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Gnome ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_i3minimal() {
	local apkgs=(i3 dmenu i3status i3lock geany volumeicon mc scrot ImageMagick gnome-themes-standard axel mps-youtube youtube-dl mpv cava mate-themes)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} I3 ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_swayminimal() {
	local apkgs=(sway)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Sway ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_mateminimal() {
	local apkgs=('mate' 'mate-extra' 'mate-applets' 'atril' 'caja-image-converter' 'caja-open-terminal' 'caja-sendto'
		'caja-share' 'caja-wallpaper' 'caja-xattr-tags' 'engrampa' 'eom' 'mate-calc' 'mate-icon-theme-faenza'
		'mate-media' 'mate-netbook' 'mate-power-manager' 'mate-screensaver' 'mate-sensors-applet' 'mate-system-monitor'
		'mate-terminal' 'mate-utils' 'mozo' 'pluma' 'mate-backgrounds')
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Mate ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_twmminimal() {
	local apkgs=('twm')
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Twm ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_awesomeminimal() {
	local apkgs=(awesome polybar pcmanfm font-awesome)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Awesome ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_bspwmminimal() {
	local apkgs=(bspwm polybar sxhkd dunst flameshot picom feh dmenu lua wmctrl compton mpd)
	      apkgs+=(font-weather-icons font-awesome5 noto-fonts-cjk hsetroot lxappearance)
	      apkgs+=(rofi gtk-engine-murrine gtk2-engines)
	      apkgs+=(chili-void-bspwm-skel)

	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Bspwm ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_enlightenmentminimal() {
	local apkgs=(enlightenment efl exquisite acpi acpid connman)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Bspwm ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}


sh_dwmminimal() {
	local apkgs=(dwm)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Dwm ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_hyprlandminimal() {
	local user="${AsUser[cuser]}"
	local apkgs=(hyprland hyprland-protocols xdg-desktop-portal-hyprland dbus polkit seatd elogind mesa-dri)
		  apkgs+=(hyprlang)
		  apkgs+=(Waybar dunst kitty libnotify xdg-desktop-portal-gtk)
		  #Wallpaper tool for Wayland compositors
		  apkgs+=(swaybg) 		#Wallpaper tool for Wayland compositors
		  apkgs+=(hyprpaper) 	#Fast wallpaper utility for wlroots compositors with IPC controls
		  apkgs+=(mpvpaper) 	#Video wallpaper program for wlroots based wayland compositors
		  #hyprland's default terminal
		  apkgs+=(kitty alacritty)
		  #other great options
#		  apkgs+=(alacritty wezterm)
		  #most popular option
		  apkgs+=(rofi)
		  #gtk rofi
		  apkgs+=(wofi)
		  #hyprland wiki
		  apkgs+=(bemenu fuzzel tofi)
		  apkgs+=(neovim)
	shell='/bin/bash'

	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Hyprland ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}" "$err_not_fatal"
}

sh_lxdeminimal() {
	local apkgs=(lxde lxterminal lxrandr lxtask lxinput lxappearance)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Lxde ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_lxqtminimal() {
	local apkgs=(lxqt)
	sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Lxqt ${cmsg_Em[$LC_DEFAULT]} $dir_install" "LC_ALL=C ${XBPS_INSTALL_UNPACK_ONLY} ${apkgs[*]}"
}

sh_make_bspwm_conf() {
	local user="${AsUser[cuser]}"
	shell='/bin/bash'
	sh_chroot_job "${cmsg_Configurando[$LC_DEFAULT]} Bspwm ${cmsg_Em[$LC_DEFAULT]} $dir_install" \
		"mkdir -p /home/$user/.config/{bspwm,polybar,sxhkd} ;													\
						cp -R /usr/share/doc/bspwm/examples/* /home/$user/.config/bspwm/;									\
						cp /usr/share/examples/polybar/config.ini /home/$user/.config/polybar/;							\
						cp /usr/share/doc/bspwm/examples/sxhkdrc /home/$user/.config/sxhkd/;								\
						echo '#!/usr/bin/env bash'  >> /home/$user/.config/polybar/launch.sh ; 							\
						echo 'polybar-msg cmd quit' >> /home/$user/.config/polybar/launch.sh ; 							\
						echo 'echo "---" | tee -a /tmp/polybar1.log /tmp/polybar2.log' >> /home/$user/.config/polybar/launch.sh ; \
						echo 'polybar example 2>&1 | tee -a /tmp/polybar1.log & disown' >> /home/$user/.config/polybar/launch.sh ; \
						echo '~/.config/polybar/launch.sh' >> /home/$user/.config/bspwm/bspwmrc ; \
						chmod +x $user:$user /home/$user/.config/polybar/launch.sh ; \
						chown $user:$user /home/$user/.config -R"
}

sh_backup_partitions() {
	if [ $# -ge 2 ]; then
		local disk="${1}"
		local device="${2}"
		local tmpdir="/tmp/$_APP_"
		local cdatetime
		local filetmp

		cdatetime=$(sh_diahora)
		filetmp="$tmpdir/${device}.$cdatetime.dump"
		mkdir -p "$tmpdir" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		sfdisk -d "$disk" >"$filetmp" 2>/dev/null
		#  info "BACKUP DA TABELA DE PARTICOES"    \
		#         "Dispositivo : $disk"              \
		#         "  Backup on : ${filetmp}"         \
		#        "$(replicate "=" 80)"               \
		#         "$(cat $filetmp)"
	fi
}

sh_diahora() {
	DIAHORA=$(date +"%d%m%Y-%T" | sed 's/://g')
	printf "%s\n" "$DIAHORA"
}

sh_rtrim() {
	local str="$1"
	echo "${str%%' '}"
}

sh_vg_info() {
	unset ARRAY_VG_{NAME,SIZE,FREE,ATTR}
	local {NAME,SIZE,FREE,ATTR}_

	mensagem "=== VG ===" "\n\n${BOLD}${WHITE}$(gettext "Aguarde... coletando informações")"
	AARRAY_VG_DEVICES=()
	while read -r line; do
		eval "${line//=/_=}"
		ARRAY_VG_NAME+=("$NAME_")
		ARRAY_VG_SIZE+=("$SIZE_")
		ARRAY_VG_FREE+=("$FREE_")
		ARRAY_VG_ATTR+=("$ATTR_")
		AARRAY_VG_DEVICES+=(["$NAME_"]="$NAME_|$SIZE_|$FREE_|$ATTR_")
	done < <(vgs --noheadings --units G -o vg_name,vg_size,vg_free,vg_attr | awk '/^ *[[:alnum:]]+ / {print "NAME=\"" $1 "\"", "SIZE=\"" $2 "\"", "FREE=\"" $3 "\"", "ATTR=\"" $4 "\""}' | sort -k1,1 -k2,2)
}

sh_disk_info() {
	unset ARRAY_DSK_{DISKS,DEVICES,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE,FSTYPE}
	local {NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE,FSTYPE}_

	mensagem "$(gettext "=== DISCO ===")" "\n\n${BOLD}${WHITE}$(getext "Aguarde... coletando informações")"
	AARRAY_DSK_DEVICES=()
	while read -r line; do
		eval "${line//=/_=}"
		ARRAY_DSK_DISKS+=("$NAME_")
		ARRAY_DSK_DEVICES+=("$PATH_")
		ARRAY_DSK_SIZE+=("$SIZE_")
		ARRAY_DSK_TRAN+=("${TRAN_:-${TYPE_}}")
		ARRAY_DSK_MODEL+=("${MODEL_:-${TYPE_} device}")
		ARRAY_DSK_LABEL+=("${LABEL_:-""}")
		ARRAY_DSK_SERIAL+=("${SERIAL_:-""}")
		ARRAY_DSK_PTTYPE+=("${PTTYPE_:-""}")
		ARRAY_DSK_FSTYPE+=("${FSTYPE_:-none}")
		AARRAY_DSK_DEVICES+=(["$PATH_"]="$NAME_|$SIZE_|${TRAN_:-${TYPE_}}|${MODEL_:-unknown}|${LABEL_:-""}|${SERIAL_:-""}|${PTTYPE_:-""}|${FSTYPE_:-"none"}")
	done < <(lsblk -PAo TYPE,NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE | grep -P 'TYPE="(disk|loop|lvm)"' | sort -k5,5 -k2,2)
}

sh_disk_part_info() {
	unset ARRAY_DSK_{DISKS,DEVICES,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE,FSTYPE}
	unset ARRAY_PART_{DISKS,DEVICES,SIZE,TRAN,MODEL,LABEL,SERIAL,FSTYPE,PARTTYPENAME}
	local {NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE,FSTYPE,PARTTYPENAME}_

	mensagem "$(gettext "=== DISCO/PARTIÇÃO ===")" "\n\n${BOLD}${WHITE}$(gettext "Aguarde... coletando informações")"
	AARRAY_DSK_DEVICES=()
	AARRAY_PART_DEVICES=()
	while read -r line; do
		eval "${line//=/_=}"
		if [[ "${TYPE_}" != "part" ]]; then
			ARRAY_DSK_DISKS+=("$NAME_")
			ARRAY_DSK_DEVICES+=("$PATH_")
			ARRAY_DSK_SIZE+=("$SIZE_")
			ARRAY_DSK_TRAN+=("${TRAN_:-${TYPE_}}")
			ARRAY_DSK_MODEL+=("${MODEL_:-${TYPE_} device}")
			ARRAY_DSK_LABEL+=("${LABEL_:-""}")
			ARRAY_DSK_SERIAL+=("${SERIAL_:-""}")
			ARRAY_DSK_PTTYPE+=("${PTTYPE_:-""}")
			ARRAY_DSK_FSTYPE+=("${FSTYPE_:-none}")
			ARRAY_DSK_PARTTYPENAME+=("${PARTTYPENAME_:-none}")
			AARRAY_DSK_DEVICES+=(["$PATH_"]="$NAME_|$SIZE_|${TRAN_:-${TYPE_}}|${MODEL_:-unknown}|${LABEL_:-""}|${SERIAL_:-""}|${PTTYPE_:-""}|${FSTYPE_:-"none"}|${PARTTYPENAME_:-none}")
		fi
		if [[ "${TYPE_}" = "part" ]]; then
			[[ "$FSTYPE_" = "iso9660" ]] && continue
			#		[[ "$FSTYPE_" = "crypto_LUKS" ]] && continue
			#		[[ "$FSTYPE_"  = "LVM2_member" ]] && continue
			ARRAY_PART_DISKS+=("$NAME_")
			ARRAY_PART_DEVICES+=("$PATH_")
			ARRAY_PART_SIZE+=("$SIZE_")
			ARRAY_PART_TRAN+=("${TRAN_:-${TYPE_}}")
			ARRAY_PART_MODEL+=("${MODEL_:-unknown}")
			ARRAY_PART_LABEL+=("${LABEL_:-""}")
			ARRAY_PART_SERIAL+=("${SERIAL_:-""}")
			ARRAY_PART_FSTYPE+=("${FSTYPE_:-none}")
			ARRAY_PART_PARTTYPENAME+=("${PARTTYPENAME_:-none}")
			AARRAY_PART_DEVICES+=(["$PATH_"]="$NAME_|$SIZE_|${TRAN_:-${TYPE_}}|${MODEL_:-unknown}|${LABEL_:-""}|${SERIAL_:-""}|${FSTYPE_:-"none"}|${PARTTYPENAME_:-none}")
		fi
	done < <(lsblk -PAo TYPE,NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,PTTYPE,FSTYPE,PARTTYPENAME | grep -P 'TYPE="(disk|loop|lvm|part)"' | sort -k5,5 -k2,2)
}

sh_part_info() {
	unset ARRAY_PART_{DISKS,DEVICES,SIZE,TRAN,MODEL,LABEL,SERIAL,FSTYPE,PARTTYPENAME}
	local {NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,FSTYPE,PARTTYPENAME}_

	mensagem "$(gettext "=== PARTIÇÃO ===")" "\n\n${BOLD}${WHITE}$(gettext "Aguarde... coletando informações")"
	AARRAY_PART_DEVICES=()
	while read -r line; do
		eval "${line//=/_=}"
		[[ "$FSTYPE_" = "iso9660" ]] && continue
		#		[[ "$FSTYPE_" = "crypto_LUKS" ]] && continue
		[[ "$FSTYPE_" = "LVM2_member" ]] && continue
		ARRAY_PART_DISKS+=("$NAME_")
		ARRAY_PART_DEVICES+=("$PATH_")
		ARRAY_PART_SIZE+=("$SIZE_")
		ARRAY_PART_TRAN+=("${TRAN_:-${TYPE_}}")
		ARRAY_PART_MODEL+=("${MODEL_:-unknown}")
		ARRAY_PART_LABEL+=("${LABEL_:-""}")
		ARRAY_PART_SERIAL+=("${SERIAL_:-""}")
		ARRAY_PART_FSTYPE+=("${FSTYPE_:-none}")
		ARRAY_PART_PARTTYPENAME+=("${PARTTYPENAME_:-none}")
		AARRAY_PART_DEVICES+=(["$PATH_"]="$NAME_|$SIZE_|${TRAN_:-${TYPE_}}|${MODEL_:-unknown}|${LABEL_:-""}|${SERIAL_:-""}|${FSTYPE_:-"none"}|${PARTTYPENAME_:-none}")
	done < <(lsblk -fPAo TYPE,NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL,FSTYPE,PARTTYPENAME | grep -P 'TYPE="(part)"' | sort -k5,5 -k2,2)
}

sh_getIso() {
	if test -e '/run/initramfs/live/LiveOS/squashfs.img'; then
		return 0
	fi
	return 1
}

sh_chooseSource() {
	local -A Asource
	local -A Aflag
	local cextra
	local exit_status
	local array=()
	local x

	Asource["local"]="${cmsg_PacotesDaImagemIso[LC_DEFAULT]}"
	Asource["network"]="${cmsg_BaixadoDoRepositorioOficial[$LC_DEFAULT]}"
	Asource["networkFull"]="${cmsg_BaixadoDoRepositorioOficialFull[$LC_DEFAULT]}"
	cextra="${cmsg_ExtraNotIso[$LC_DEFAULT]}"

	_SOURCE=${AConfMirror[_SOURCE]}
	for x in "${!Asource[@]}"; do
		if [[ $_SOURCE = $x ]] ; then
			Aflag[$x]='on'
		else
			Aflag[$x]='off'
		fi
		if sh_getIso; then
			cextra="${cmsg_ExtraIso[$LC_DEFAULT]}"
		else
			if ! sh_checkcommand "${XBPS_INSTALL_CMD}"; then
				cextra="${cmsg_ExtraNotIso[$LC_DEFAULT]}\n${cmsg_ExtraNotHostVoid[$LC_DEFAULT]}"
			else
				cextra="${cmsg_ExtraNotIso[$LC_DEFAULT]}"
			fi
		fi
		array+=("$x" "${Asource[$x]}" "${Aflag[$x]}")
	done

	while true;
	do
	src=$(${DIALOG} --title "=== ${cmsg_Source[LC_DEFAULT]^^} ===" \
		--default-item "$_SOURCE" \
		--stdout \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--radiolist "${cmsg_MENU[$LC_DEFAULT]}\n\n$cextra" \
		12 0 0 "${array[@]}")

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return 1
		;;
	"$D_OK")
		#dom 03 mar 2024 17:00:23 -04
		if [[ "$src" = "networkFull" ]]; then
			if ! sh_checkcommand "${XBPS_INSTALL_CMD}"; then
				alerta "=== ${cmsg_Source[LC_DEFAULT]^^} ===" \
					"\n${BOLD}$(gettext "Aparentemente, o VOID Linux NÃO está sendo usado como host.\nEscolha network ou ISO")"
				continue
			fi
		fi
		if [[ "$src" = "local" ]]; then
			if ! sh_getIso; then
				info "$ccabec" "\n\n$cextra"
				LSOURCE=$false
				sh_chooseSource
			else
				LSOURCE=$true
				_SOURCE=$src
				AConfMirror[_SOURCE]=$src
			fi
		fi
		;;
	esac
	LSOURCE=$true
	_SOURCE=$src
	AConfMirror[_SOURCE]=$src
	return 0
done
}

sh_choosefstype() {
	local oldfstype="$1"
	declare -A Afs
	declare -A Aflag
	local cextra
	local exit_status
	local array=()
	local x

	Afs[xfs]="SGI's XFS"
	Afs[reiserfs]="Linux Reiserfs"
	Afs[jfs]="Linux Jfs"
	Afs[f2fs]="Flash-Friendly Filesystem"
	Afs[ext3]="Linux ext3 (journal)"
	Afs[ext2]="Linux ext2 (no journaling)"
	Afs[btrfs]="Oracle Btrfs"
	Afs[ext4]="Linux ext4 (journal)"
	Afs[vfat]="FAT32 (EFI)"
	Afs[swap]="Linux swap"

	if [[ -z "$oldfstype" ]]; then
		oldfstype=$_FILESYSTEM
	fi

	for x in "${!Afs[@]}"; do
		[[ "$oldfstype" = "$x" ]] && Aflag[$x]='on' || Aflag[$x]='off'
		array+=("$x" "${Afs[$x]}" "${Aflag[$x]}")
	done

	cextra="${cmsg_mkfs[$LC_DEFAULT]}"
	mkfs=$(${DIALOG} \
		--title "${cmsg_TitleFileSystem[$LC_DEFAULT]}" \
		--default-item "$oldfstype" \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--radiolist "${cmsg_MENU[$LC_DEFAULT]}\n\n$cextra" \
		12 70 0 "${array[@]}" 2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return 1
		;;
	esac
	LFS=$true
	_FILESYSTEM=$mkfs
	return 0
}

sh_chooseaudioserver() {
	local exit_status
	local array=()
	local x
	local caudio

	array+=("Pulseaudio" "Pulseaudio" "on")
	array+=("Pipewire" "Pipewire" "off")

	caudio=$(${DIALOG} \
		--title "${cmsg_DefinirAudioServer[$LC_DEFAULT]}" \
		--default-item "$_AUDIOSERVER" \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--radiolist "${cmsg_MENU[$LC_DEFAULT]}\n\n$cextra" \
		12 70 0 "${array[@]}" 2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return 1
		;;
	esac
	LAUDIO=$true
	_AUDIOSERVER="$caudio"
	return 0
}

sh_timedatectl() {
	local _localtime

	if [[ -n $(command -v timedatectl) ]]; then
		_localtime=$(awk '{print $3}' <(grep 'Time zone' <(timedatectl)))
		if [[ -n "$_localtime" ]]; then
			echo "$_localtime"
			return 0
		fi
	else
		_localtime=$(cut -d'"' -f2 <(grep TIMEZONE /etc/rc.conf))
		if [[ -n "$_localtime" ]]; then
			echo "$_localtime"
			return 0
		fi
	fi
	return 1
}

sh_chooseTimezone() {
	local -A Atimezone
	local -A Aflag
	local array=()
	local _localtime
	local defaultitem
	local fields
	local timezone
	local sorted_list
	local exit_status
	local areas=('Africa' 'America' 'Antarctica' 'Arctic' 'Asia' 'Atlantic' 'Australia' 'Europe' 'Pacific' 'Brazil' 'Canada' 'Chile' 'Indian' 'Mexico')
	local locations
	local area

	for area in "${areas[@]}"; do
		read -r -a locations -d '\n' < <(find /usr/share/zoneinfo/"$area" -type f -printf '%P\n')
		for key in "${locations[@]}"; do
			Atimezone+=([$key]="$area/$key")
		done
	done

	[[ -z "${AConfLocale[_TIMEZONE]}" ]] && AConfLocale[_TIMEZONE]='America/Sao_Paulo'
	defaultitem="${AConfLocale[_TIMEZONE]#*/}"

	if ! ((LTIMEZONE)); then
		_localtime=$(sh_timedatectl) && defaultitem="${_localtime#*/}"
		if [[ -z "${Atimezone[$defaultitem]}" ]]; then
			Atimezone["$defaultitem"]="$_localtime"
		fi
	fi

	sorted_list=$(for key in "${!Atimezone[@]}"; do echo "$key|${Atimezone[$key]}"; done | sort -t\| -k2 -k1)
	while IFS='|' LC_ALL=C read -r -a fields; do
		x="${fields[0]}"
		Aflag[$x]='off'
		Aflag[$defaultitem]='on'
		array+=("$x" "${Atimezone[$x]}" "${Aflag[$x]}")
	done <<<"${sorted_list[@]}"

	timezone=$(${DIALOG} \
		--title "$(gettext "=== FUSO HORÁRIO ===")" \
		--default-item "$defaultitem" \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--radiolist "${cmsg_MENU[$LC_DEFAULT]}" \
		25 70 24 "${array[@]}" 2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return
		;;
	esac
	AConfLocale[_TIMEZONE]="${Atimezone[$timezone]}"
	LTIMEZONE=$true
}

sh_chooseMirror() {
	declare -A Aflag
	local exit_status
	local array
	local sep="\xe2\x94\x82"
	local fields
	local key
	local sorted_list
	local -i FLD_MIRROR=0
	local -i FLD_REPOSITORY=1
	local -i FLD_REGION=2
	local -i FLD_LOCATION=3
	local -i FLD_TIER=4

	declare -gA Amirror=([voidlinux.com.br]="https://voidlinux.com.br/repo/|South and Central America|Ouro Preto, Brazil|2"
		[void.chililinux.com]="http://void.chililinux.com/voidlinux/|South and Central America|Pimenta Bueno, Brazil|2"
		[void.chililinux.com_2]="https://void.chililinux.com/voidlinux/|South and Central America|Pimenta Bueno, Brazil|2"
		[void.chilios.com.br]="http://void.chilios.com.br/voidlinux/|South and Central America|Pimenta Bueno, Brazil|2"
		[void.chilios.com.br_2]="https://void.chilios.com.br/voidlinux/|South and Central America|Pimenta Bueno, Brazil|2"
		[mirror.sjtu.edu.cn]="https://mirror.sjtu.edu.cn/voidlinux/|Asia|Shanghai, China|2"
		[mirrors.servercentral.com]="https://mirrors.servercentral.com/voidlinux/|North America|Chicago, USA|1"
		[mirror.clarkson.edu]="https://mirror.clarkson.edu/voidlinux/|North America/|New York, USA|2"
		[void.webconverger.org]="https://void.webconverger.org/|Asia|Singapore|2"
		[ftp.swin.edu.au]="https://ftp.swin.edu.au/voidlinux/|Oceania|Melbourne, Australia|2"
		[ftp.debian.ru]="http://ftp.debian.ru/mirrors/voidlinux/|Europe|Russia|2"
		[mirror.yandex.ru]="https://mirror.yandex.ru/mirrorsvoidlinux/|Europe|Russia|2"
		[ftp.dk.xemacs.org]="http://ftp.dk.xemacs.org/voidlinux/|Europe|Denmark|2"
		[ftp.lysator.liu.se]="https://ftp.lysator.liu.se/pub/voidlinux/|Europe|Sweden|2"
		[mirror.nju.edu.cn]="https://mirror.nju.edu.cn/voidlinux/|Asia|China|2"
		[quantum - mirror.hu]="https://quantum-mirror.hu/mirrors/pub/voidlinux/|Europe|Hungary|2"
		[void.cijber.net]="https://void.cijber.net/|Europe/|Amsterdam, Netherlands|2"
		[mirror.puzzle.ch]="https://mirror.puzzle.ch/voidlinux/|Europe|Bern, Switzerland|2"
		[repo - fi.voidlinux.org]="https://repo-fi.voidlinux.org/|Europe|Helsinki, Finland|1"
		[mirrors.dotsrc.org]="https://mirrors.dotsrc.org/voidlinux/|Europe|Denmark|2"
		[mirrors.bfsu.edu.cn]="https://mirrors.bfsu.edu.cn/voidlinux/|Asia|Beijing, China|2"
		[void.sakamoto.pl]="https://void.sakamoto.pl/|Europe|Warsaw, Poland|2"
		[mirrors.cnnic.cn]="https://mirrors.cnnic.cn/voidlinux/|Asia|Beijing, China|2"
		[mirror.vofr.net]="https://mirror.vofr.net/voidlinux/|North America|California, USA|2"
		[mirror.aarnet.edu.au]="https://mirror.aarnet.edu.aupub/voidlinux/|Oceania|Canberra, Australia|2"
		[repo - fastly.voidlinux.org]="https://repo-fastly.voidlinux.org/|Globally Available|Fastly Global CDN|1"
		[mirror.ps.kz]="https://mirror.ps.kz/voidlinux/|Asia|Almaty, Kazakhstan|2"
		[voidlinux.mirror.garr.it]="https://voidlinux.mirror.garr.it/|Europe|Italy|2"
		[mirror2.sandyriver.net]="https://mirror2.sandyriver.net/pub/voidlinux/|North America|Kentucky, USA|2"
		[mirror.accum.se]="https://mirror.accum.se/mirror/voidlinux/|Europe|Sweden|2"
		[mirrors.tuna.tsinghua.edu.cn]="https://mirrors.tuna.tsinghua.edu.cn/voidlinux/|Asia|Beijing, China|2"
		[repo - de.voidlinux.org]="https://repo-de.voidlinux.org/|Europe|Frankfurt, Germany|1")

	while true; do
		array=()
		sorted_list=$(for key in "${!Amirror[@]}"; do echo "$key|${Amirror[$key]}"; done | sort -t\| -k5 -k3)
		while IFS='|' LC_ALL=C read -r -a fields; do
			key="${fields[FLD_MIRROR]}"
			[[ "${AConfMirror[_MIRROR]}" = "$key" ]] && Aflag["$key"]='on' || Aflag["$key"]='off'
			array+=("$key" "$(printf "$sep%-6s$sep%-25s$sep%-23s$sep%-s" \
				"Tier ${fields[FLD_TIER]}" \
				"${fields[FLD_REGION]}" \
				"${fields[FLD_LOCATION]}" \
				"${fields[FLD_REPOSITORY]}")"
			"${Aflag[$key]}")
		done <<<"${sorted_list[@]}"

		mirror=$(${DIALOG} \
			--title "=== ${cmsg_Mirror[LC_DEFAULT]^^} ===" \
			--stdout \
			--keep-tite \
			--aspect 20 \
			--clear \
			--backtitle "$ccabec" \
			--default-item "${AConfMirror[_MIRROR]}" \
			--colors \
			--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--extra-button --extra-label "void-testmirror" \
			--radiolist "${cmsg_MENU[$LC_DEFAULT]}" \
			0 0 0 "${array[@]}")

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return 1
			;;
		3)
			oldgrafico=$grafico
			grafico=$true
			if [[ -n $(command -v void-testmirror) || -n $(command -v ./void-testmirror) ]]; then
				last_msg="Wait... ${cmsg_Gerando[$LC_DEFAULT]} test with void-testmirror ${xurl}"
				msg "=== ${cmsg_Mirror[LC_DEFAULT]^^} === void-testmirror" "$last_msg" "$(log_info_msg "$last_msg")"
				result=$(void-testmirror --nocolor --ping --quiet)
				evaluate_retval "$?" "$err_not_fatal"
				[[ -z "$result" ]] && result="${RED}ERRO DESCONHECIDO: void-testmirror não retornou resultado${RESET}"
				info "=== ${cmsg_Mirror[LC_DEFAULT]^^} === void-testmirror" "\n$result"
			else
				last_msg "Wait... ${cmsg_Gerando[$LC_DEFAULT]} test with void-mirror ${xurl}"
				msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
				evaluate_retval "1" "$err_not_fatal"
				info "=== ${cmsg_Mirror[LC_DEFAULT]^^} === void-testmirror" "\n${RED}void-testmirror não foi localizado no \$PATH${RESET}" \
					"${RED}void-testmirror não foi localizado em $PWD!${RESET}"
			fi
			grafico=$oldgrafico
			continue
			;;
		esac
		AConfMirror[_MIRROR]="$mirror"
		url_mirror="$(sh_splitarray "${Amirror[$mirror]}" "$FLD_REPOSITORY")"
		AConfMirror[url_mirror]="$(sh_splitarray "${Amirror[$mirror]}" "$FLD_REPOSITORY")"
		AConfMirror[location]="$(sh_splitarray "${Amirror[$mirror]}" "$FLD_LOCATION")"
		LMIRROR=$true

		if [[ "$distro" = @(void|void-live|voidlinux) ]]; then
			if conf "=== ${cmsg_Mirror[LC_DEFAULT]^^} ===" \
				"\n${BOLD}$(gettext "Aparentemente, o VOID Linux está sendo usado como host.")\n" \
				"\n${BOLD}${CYAN}Mirror     : ${AConfMirror[_MIRROR]}" \
				"\n${BOLD}${CYAN}Url Mirror : $url_mirror" \
				"\n${BOLD}${CYAN}Region     : $(sh_splitarray "${Amirror[$mirror]}" "$FLD_REGION")" \
				"\n${BOLD}${CYAN}Location   : $(sh_splitarray "${Amirror[$mirror]}" "$FLD_LOCATION")\n" \
				"\n${RED}$(gettext "Você também deseja definir/alterar o espelho do host para o escolhido?")${RESET}\n\n"; then
				last_msg="${cmsg_Configurando[$LC_DEFAULT]} ${cmsg_Mirror[$LC_DEFAULT],,} ${cmsg_Em[$LC_DEFAULT]} $dir_install"
				msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
				mkdir -p "/etc/xbps.d/"
				cat >"/etc/xbps.d/00-repository-main.conf" <<-EOF
					repository=${url_mirror}current
					repository=${url_mirror}current/nonfree
					repository=${url_mirror}current/multilib
					repository=${url_mirror}current/multilib/nonfree
				EOF
				evaluate_retval "$?"
			fi
		fi
		return 0
	done
}

sh_testcommand() {
	if [[ -z $(command -v "$1") ]]; then
#		echo "$(gettext "não disponível")"
		"$(gettext "não disponível")"
	else
#		echo "$(gettext "mais avançado")"
		"$(gettext "mais avançado")"
	fi
}

sh_execUtilDisk() {
	local exit_status
	${DIALOG} \
		--title "Modify Partition Table on $_DEVICE" \
		--colors \
		--msgbox "\n
${BOLD}${software} $(gettext "será executado no disco") $_DEVICE.${RESET}\n\n
$(gettext "Para sistemas BIOS, ")\
$(gettext "tabelas de partições MBR (dos) ou GPT são suportadas.")\n
$(gettext "Para usar o GPT em sistemas de BIOS de PC, ")
$(gettext "uma partição vazia de 1 MB deve ser adicionada")\n
$(gettext "nos primeiros 2 GB do disco com flag bios_grub ativada.")\n
${BOLD}$(gettext "NOTA: você não precisa disso em sistemas UEFI.")${RESET}\n\n
$(gettext "Para sistemas UEFI, GPT é obrigatório, e uma partição FAT32 com pelo menos")\n
$(gettext "100MB deve ser criado com a flag boot,")
$(gettext "este será usado como")\n
$(gettext "Partição do sistema UEFI.")\
$(gettext "Esta partição deve ter um ponto de montagem como") '/boot/efi'\n\n
$(gettext "Pelo menos 1 partição é necessária para rootfs") '(/)'.\n
$(gettext "Para o swap,") $(gettext "Uma RAM*2 deve ser realmente suficiente.")\
$(gettext "Para o / minímo de 600 MB são necessários.")\n\n
${BOLD}$(gettext "AVISO: /usr não é suportado como uma partição separada.")${RESET}\n
${RESET}\n" 18 80
	exit_status=$?
	if [ $exit_status -eq 0 ]; then
		while true; do
			clear
			"$software" "$_DEVICE"
			LAUTO=0
			break
		done
	else
		return 1
	fi
	sh_disk_part_info
	return 0
}

sh_menuUtilDisk() {
	local array=()
	local i
	local n=0
	local nc=0
	local result
	local sep="\xe2\x94\x82"
	local -A ARRAY_UTIL_DISK=()

	ARRAY_UTIL_DISK+=(["automatic"]="Recommended|Automatic partitioning and formatting|")
	ARRAY_UTIL_DISK+=(["cfdisk"]=$([[ -z $(command -v "cfdisk") ]] && echo "Not available||" || echo "Easy to use|cfdisk is a curses-based program for partitioning any block device|"))
	ARRAY_UTIL_DISK+=(["fdisk"]=$([[ -z $(command -v "fdisk") ]] && echo "Not available||" || echo "More advanced|fdisk is a dialog-driven program for creation and manipulation of partition tables|"))
	ARRAY_UTIL_DISK+=(["gdisk"]=$([[ -z $(command -v "gdisk") ]] && echo "Not available||" || echo "More advanced|GPT fdisk (aka gdisk) is a text-mode menu-driven program for creation and manipulation of partition tables.|"))
	ARRAY_UTIL_DISK+=(["parted"]=$([[ -z $(command -v "parted") ]] && echo "Not available||" || echo "More advanced|parted is a program to manipulate disk partitions|"))
	ARRAY_UTIL_DISK+=(["sfdisk"]=$([[ -z $(command -v "sfdisk") ]] && echo "Not available||" || echo "More advanced|sfdisk is a script-oriented tool for partitioning any block device|"))

	for i in $(echo "${!ARRAY_UTIL_DISK[@]}" | tr ' ' '\n' | sort); do
		array[n++]="$i"
		array[n++]=$(printf "%-20s$sep%-30s" "$(sh_splitarray "${ARRAY_UTIL_DISK[$i]}" 1)" "$(sh_splitarray "${ARRAY_UTIL_DISK[$i]}" 2)")
		((nc++))
	done

	software=$(${DIALOG} \
		--colors --backtitle "$ccabec" \
		--title "$(gettext "Selecione o software para particionamento")" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--menu "${cmsg_MENU[$LC_DEFAULT]}\n\n\
${BOLD}DEVICE  : ${RESET}${RED}$_DEVICE${RESET}\n\
${BOLD}MODEL   : ${RESET}${RED}$MODEL_ORIGEM${RESET}\n" \
		0 0 0 "${array[@]}" 2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return 1
		;;
	esac

	case "$software" in
	"automatic")
		if sh_chooseTablePartition; then
			LMKPARTED=$false
			oldgrafico=$grafico
			grafico=$true
			sh_mkparted
			grafico=$oldgrafico
			sh_disk_part_info
		fi
		LAUTO=1
		return 0
		;;
	esac

	if sh_execUtilDisk; then
		LAUTO=0
	fi
	return 0
}

sh_getNvme() {
	local tran
	tran="$(sh_splitarray "${AARRAY_DSK_DEVICES[$_DEVICE]}" 3)"
	case "$tran" in
	nvme) echo 'p' ;;
	loop) echo 'p' ;;
	lvm) echo '' ;;
	*) echo '' ;;
	esac
}

sh_getlgrub() {
	local _device="$1"
	if [[ "$LGRUB" == "true" && "$_BOOTLOADER" = "$_device" ]]; then
		echo '*'
	else
		echo ' '
	fi
}

sh_chooseDisk() {
	sh_umount_fs
	while true; do
		sh_disk_part_info
		local array=()
		local i
		local n=0
		local nlen=0
		local nc=0
		local result
		local sep="\xe2\x94\x82"
		local xtitle
		local LCHOOSEBOOTLOADER

		if [ $# -eq 0 ]; then
			xtitle="${cmsg_TitleDisco[$LC_DEFAULT]}"
			LCHOOSEBOOTLOADER=$false
		else
			xtitle="${cmsg_BootLoader[$LC_DEFAULT]^^}"
			LCHOOSEBOOTLOADER=$true
		fi

		for i in "${ARRAY_DSK_DEVICES[@]}"; do
			array[n++]="$i"
			if ((nlen < ${#i})); then
				nlen=${#i}
			fi
			array[n++]=$(printf "$sep%-4s$sep%-6s$sep%6s$sep%-6s$sep%-15s$sep%-30s" \
				"$(sh_getlgrub "$i")" \
				"${ARRAY_DSK_TRAN[$nc]}" \
				"${ARRAY_DSK_SIZE[$nc]}" \
				"${ARRAY_DSK_PTTYPE[$nc]}" \
				"${ARRAY_DSK_LABEL[$nc]}" \
				"${ARRAY_DSK_MODEL[$nc]}")
			((nc++))
		done
		((nlen += 6))
		sd=$(${DIALOG} \
			--default-item "$_DEVICE" \
			--backtitle "$ccabec" \
			--title "$xtitle" \
			--ok-label "${cmsg_ButtonFeito[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
			--colors \
			--extra-button \
			--extra-button --extra-label "${cmsg_Configurar}" \
			--menu "${cmsg_MENU[$LC_DEFAULT]}\n\n\
$(printf "%${nlen}s$sep%-4s$sep%-6s$sep%6s$sep%-6s$sep%-15s$sep%-30s" "DEVICE" "BOOT" "TRAN" "SIZE" "PTTYPE" "LABEL" "MODEL")" \
			0 0 25 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return 1
			;;
		esac

		if [[ -n "$sd" ]]; then
			_DEVICE="$sd"
			AConfDisk[_DEVICE]="$sd"
			index=$(sh_seekstrarray "${ARRAY_DSK_DEVICES[*]}" "$_DEVICE")
			NAME_ORIGEM="$(sh_splitarray "${AARRAY_DSK_DEVICES[$_DEVICE]}" "$DSK_NAME")"
			MODEL_ORIGEM="$(sh_splitarray "${AARRAY_DSK_DEVICES[$_DEVICE]}" "$DSK_MODEL")"
			SIZE_ORIGEM="$(sh_splitarray "${AARRAY_DSK_DEVICES[$_DEVICE]}" "$DSK_SIZE")"
			TRAN_ORIGEM="$(sh_splitarray "${AARRAY_DSK_DEVICES[$_DEVICE]}" "$DSK_TRAN")"

			if ((LCHOOSEBOOTLOADER)); then
				_BOOTLOADER=$_DEVICE
				AConfDisk[_BOOTLOADER]=$_BOOTLOADER
				LGRUB=true
				LOSPROBER=$false
				LDISK=$true
				return 0
			fi
		fi

		case $exit_status in
		"$D_OK")
			sh_checkdisk "$_DEVICE"
			sh_backup_partitions "$_DEVICE" "$NAME_ORIGEM"
			_DEVICE="$sd"
			_BOOTLOADER=$_DEVICE
			AConfDisk[_BOOTLOADER]=$_BOOTLOADER
			LGRUB=true
			LOSPROBER=$false
			LDISK=$true
			return 0
			;;
		"$D_CONFIG")
			sh_menuUtilDisk
			continue
			;;
		esac
	done
	LDISK=$true
	return 0
}

sh_setBootLoader() {
	if sh_chooseDisk "=== BOOTLOADER (GRUB) ==="; then
		_BOOTLOADER=$_DEVICE
		AConfDisk[_BOOTLOADER]=$_BOOTLOADER
		LGRUB=true
		LOSPROBER=$false
		if conf "=== OS-PROBER ===" "\n$(gettext "Detectar outro OS(s) instalado ?")\n\n"; then
			LOSPROBER=$true
		fi
		AConfDisk[_OSPROBER]="$LOSPROBER"
		return 0
	fi
	return 1
}

sh_chooseTablePartition() {
	local -A Atable
	local -A Aflag
	local cextra
	local exit_status
	local array=()
	local x

	Atable[EFI]="${cmsg_Efi[$LC_DEFAULT]} - ${cmsg_TabelaGPT[$LC_DEFAULT]}"
	Atable[GPT_BIOS]="${cmsg_Bios[$LC_DEFAULT]} - ${cmsg_TabelaGPT[$LC_DEFAULT]}"
	Atable[MBR_BIOS]="${cmsg_Bios[$LC_DEFAULT]} - ${cmsg_TabelaMBR[$LC_DEFAULT]}"
	cextra="${cmsg_ExtraNotEfi[$LC_DEFAULT]}"

	for x in "${!Atable[@]}"; do
		Aflag[$x]='off'
		if sh_getBootEFI; then
			Aflag[EFI]='on'
			cextra="${cmsg_ExtraEfi[$LC_DEFAULT]}"
		fi
		if [[ -z "$_DISKTABLE" ]]; then
			[[ "$(sh_getBootEFI)" ]] && _DISKTABLE='EFI' || _DISKTABLE='GPT_BIOS'
		fi
		Aflag[$_DISKTABLE]='on'
		array+=("$x" "${Atable[$x]}" "${Aflag[$x]}")
	done

	table=$(${DIALOG} \
		--title "$(gettext "=== TABELA DE PARTIÇÕES ===")" \
		--default-item "$_DISKTABLE" \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--radiolist "${cmsg_MENU[$LC_DEFAULT]}\n\n$cextra" \
		12 85 0 "${array[@]}" 2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return 1
		;;
	"$D_OK")
		if [[ "$table" = "GPT" ]]; then
			if ! sh_getBootEFI; then
				info "$ccabec" "$cextra"
				sh_chooseTablePartition
			fi
		fi
		;;
	esac
	_DISKTABLE="$table"
	AConfDisk[_DISKTABLE]="$table"
	return 0
}

sh_checkdisk() {
	local device="$1"
	local dsk

	last_msg="${cmsg_ChecandoParticoesMontadas[$LC_DEFAULT]}: $device"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	dsk=$(df -h | grep "$device" | awk '{print $1, $2, $3, $4, $5, $6, $7}')

	if [[ -n "$dsk" ]]; then
		evaluate_retval "$err_fatal" "$err_fatal" "${cmsg_all_mounted_part[$LC_DEFAULT]}: $dsk"
		return 1
	fi
	return 0
}

sh_confadduser() {
	local size
	local model

  sh_setUser
	size=$(sh_splitarray "${AARRAY_DSK_DEVICES[${AConfDisk[_BOOTLOADER]}]}" 2)
	model=$(sh_splitarray "${AARRAY_DSK_DEVICES[${AConfDisk[_BOOTLOADER]}]}" 4)
	while true; do
		exec 3>&1
		usertext=$(${DIALOG} \
			--title "$(gettext "=== EXTRA ===")" \
			--colors \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
			--backtitle "$ccabec" \
			--insecure "$@" \
			--mixedform "${cmsg_MENU[$LC_DEFAULT]}" \
			0 0 0 \
			"${cmsg_Extra1[$LC_DEFAULT]}: " 1 1 "${AsUser[cfullname]}" 1 28 40 0 0 \
			"${cmsg_Extra2[$LC_DEFAULT]}: " 2 1 "${AsUser[cuser]}" 2 28 20 0 0 \
			"${cmsg_Extra3[$LC_DEFAULT]} (${AsUser[cpass]}): " 3 1 "${AsUser[cpass]}" 3 28 20 0 1 \
			"${cmsg_Extra4[$LC_DEFAULT]} (${AsUser[cpassroot]}): " 4 1 "${AsUser[cpassroot]}" 4 28 20 0 1 \
			"Hostname: " 5 1 "${AsUser[chostname]}" 5 28 20 0 0 \
			"${cmsg_Extra6[$LC_DEFAULT]}: " 6 1 "${_DEVICE}" 6 28 20 0 2 \
			"Tam/Model: " 7 1 "$size/$model" 7 28 20 0 2 \
			"${cmsg_Teclado[$LC_DEFAULT]}: " 8 1 "${AConfLocale[_KEYMAP]}" 8 28 20 0 2 \
			"Timezone: " 9 1 "${AConfLocale[_TIMEZONE]}" 9 28 20 0 2 \
			"${cmsg_Extra11[$LC_DEFAULT]}: " 10 1 "${_WINDOWMANAGER[*]}" 10 28 30 0 2 \
			2>&1 1>&3)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return
			;;
		"$D_OK")
			mapfile -t aUser <<<"$usertext"
			AsUser[cfullname]="${aUser[0]}"
			AsUser[cuser]="${aUser[1]}"
			AsUser[cpass]="${aUser[2]}"
			AsUser[cpassroot]="${aUser[3]}"
			AsUser[chostname]="${aUser[4]}"

			if [[ "${AsUser[cuser]}" == "root" ]]; then
				if ! conf "$(gettext "=== USUÁRIO ===")" "\n${cmsg_adduser1[$LC_DEFAULT]}"; then
					die "$(gettext "=== USUÁRIO === ")" "${cmsg_adduserCancel[$LC_DEFAULT]}"
					return 1
				fi
				sh_confadduser
			fi

			if [[ -z "${AsUser[cuser]}" ]]; then
				if ! conf "=== ${cmsg_Usuario[$LC_DEFAULT]^^} ===" "\n${cmsg_adduser2[$LC_DEFAULT]}"; then
					die "=== ${cmsg_Usuario[$LC_DEFAULT]^^} === " "${cmsg_adduserCancel[$LC_DEFAULT]}"
					return 1
				fi
				sh_confadduser
			fi

            # Verificar se usuario começa com um número
			if [[ "${AsUser[cuser]}" =~ ^[0-9] ]]; then
				if ! conf "=== ${cmsg_Usuario[$LC_DEFAULT]^^} ===" "\n${cmsg_adduser5[$LC_DEFAULT]}"; then
					die "$(gettext "=== USUÁRIO === ")" "${cmsg_adduserCancel[$LC_DEFAULT]}"
					return 1
				fi
				sh_confadduser
			fi

            # Verificar se string1 começa com uma letra maiúscula
			if [[ "${AsUser[cuser]}" =~ ^[A-Z] ]]; then
				if ! conf "=== ${cmsg_Usuario[$LC_DEFAULT]^^} ===" "\n${cmsg_adduser6[$LC_DEFAULT]}"; then
					die "$(gettext "=== USUÁRIO === ")" "${cmsg_adduserCancel[$LC_DEFAULT]}"
					return 1
				fi
				sh_confadduser
			fi

			if [[ -z "${AsUser[cpass]}" ]]; then
				if ! conf "=== ${cmsg_Usuario[$LC_DEFAULT]^^} ===" "\n${cmsg_adduser3[$LC_DEFAULT]}"; then
					die "=== ${cmsg_Usuario[$LC_DEFAULT]^^} ===" "${cmsg_adduserCancel[$LC_DEFAULT]}"
					return 1
				fi
				sh_confadduser
			fi

			if [[ -z "${AsUser[cpassroot]}" ]]; then
				if ! conf "=== ROOT ===" "\n${cmsg_adduser4[$LC_DEFAULT]}"; then
					die "=== ROOT === " "${cmsg_adduserCancel[$LC_DEFAULT]}"
					return 1
				fi
				sh_confadduser
			fi
			LEXTRA=$true
			;;
		esac
		exec 3>&-
		return 0
	done
}

sh_choosewifi() {
	while true; do
		local array=()
		local i
		local n=0
		local nc=0
		local result
		local sep="\xe2\x94\x82"

		last_msg="$(gettext "Escaneando redes wifi...")"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
		wpa_cli scan_results 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		if [[ "${PIPESTATUS[0]}" -gt 0 ]]; then
			evaluate_retval "1" "$err_not_fatal"
			info "WIFI" "${RED}$(gettext "A verificação não retornou nenhum resultado.")" \
				"$(gettext "Aparentemente,") $(gettext "o serviço wpa_supplicant não está em execução.")" \
				"" \
				"$(gettext "Tente o seguinte:")" \
				"${BOLD}1-$(gettext "Usar a opção no menu de serviços para ativar.")" \
				"2-$(gettext "Verifique se há um dispositivo wi-fi conectado à máquina.")"
			return 1
		fi
		evaluate_retval "0"
		scan_results=$(wpa_cli scan_results)
		lines=$(wc -l <<<"$scan_results")
		lines=$((lines - 2))

		unset ARRAY_{SSID,BSID,SIGNAL,FREQUENCY,FLAGS}
		while read -r line; do
			ARRAY_SSID+=("$(awk '{print $5" "$6" "$7}' <<<"$line")")
			ARRAY_BSID+=($(cut -f1 <<<"$line"))
			ARRAY_SIGNAL+=($(cut -f2 <<<"$line"))
			ARRAY_FREQUENCY+=($(cut -f3 <<<"$line"))
			ARRAY_FLAGS+=($(cut -f4 <<<"$line"))
		done < <(tail -$lines <<<"$scan_results")

		for i in "${ARRAY_SSID[@]}"; do
			array[n++]="$i"
			array[n++]=$(printf "$sep%-6s$sep%-4s$sep%3s$sep%-30s" "${ARRAY_BSID[$nc]}" "${ARRAY_SIGNAL[$nc]}" "${ARRAY_FREQUENCY[$nc]}" "${ARRAY_FLAGS[$nc]}")
			((nc++))
		done

		wifi=$(${DIALOG} \
			--default-item "$_WIFI_NETWORK" \
			--backtitle "$ccabec" \
			--title "WIFI" \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
			--colors \
			--menu "${cmsg_MENU[$LC_DEFAULT]}" 0 0 10 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return
			;;
		esac
		_WIFI_NETWORK=$wifi
		AConfWifi[_NETWORK]=$wifi
		break
	done
}

sh_confWifi() {
	while true; do
		exec 3>&1
		wifitext=$(${DIALOG} \
			--title "$(gettext "=== WIFI ===")" \
			--colors \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
			--backtitle "$ccabec" \
			--insecure "$@" \
			--extra-button --extra-label "Scan wifi" \
			--mixedform "${cmsg_MENU[$LC_DEFAULT]}" \
			0 0 0 \
			"${cmsg_redewifi[$LC_DEFAULT]}: " 1 1 "$_WIFI_NETWORK" 1 20 40 0 0 \
			"${cmsg_senhawifi[$LC_DEFAULT]}: " 2 1 "$_WIFI_PASSWORD" 2 20 40 0 1 \
			2>&1 1>&3)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return
			;;
		"$D_OK")
			mapfile -t aWifi <<<"$wifitext"
			_WIFI_NETWORK="${aWifi[0]}"
			_WIFI_PASSWORD="${aWifi[1]}"
			AConfWifi[_NETWORK]="${aWifi[0]}"
			AConfWifi[_PASSWORD]="${aWifi[1]}"
			LWIFI=$true
			;;
		3)
			sh_choosewifi
			continue
			;;
		esac
		exec 3>&-
		return 0
	done
}

sh_dryrun() {
	sh_umount_fs
	sh_mount_fs
	sh_init_bind
	#	sh_update_rc_conf
	#	sh_update_rc_local
	#	sh_activating_services
	chroot "$dir_install" "/bin/bash"
	sh_umount_fs
}

sh_usage() {
	local usage=$(gettext "usar:")
	local operation=$(gettext "operação")

	cat <<EOF
${white}${APP} v$_VERSION_${reset}
${orange}$usage ${APP} ${reset}<$operation> [...]
${orange}     ${APP} ${reset}-i
${orange}     ${APP} ${reset}-i [-f <file>]
${orange}     ${APP} ${reset}[-i|c|f|g|q|V|n|h]
${orange}     ${APP} ${reset}[--install|--chroot|--file|--grafico|--quiet|--version|--nocolor|--help]

[<operations>] ${reset}
   ${red}-i  --install${cyan}       # ${cmsg_Usage1[$LC_DEFAULT]}
   ${red}-c  --chroot${cyan}        # ${cmsg_Usage2[$LC_DEFAULT]}
   ${red}-f  --file${cyan}          # ${cmsg_Usage8[$LC_DEFAULT]} (default: $app_conf)
   ${red}-g  --grafico${cyan}       # ${cmsg_Usage3[$LC_DEFAULT]}
   ${red}-q  --quiet${cyan}         # ${cmsg_Usage4[$LC_DEFAULT]}
   ${red}-V  --version${cyan}       # ${cmsg_Usage5[$LC_DEFAULT]}
   ${red}-n  --nocolor${cyan}       # ${cmsg_Usage6[$LC_DEFAULT]}
   ${red}-h  --help${cyan}          # ${cmsg_Usage7[$LC_DEFAULT]}${reset}
EOF
}

sh_loadconf() {
	last_msg="$(gettext "Loading configuration file"): $app_conf"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	# shellcheck source=/dev/null
	if [[ -f "$app_conf" ]]; then
		source "$app_conf"
		evaluate_retval "$?"
		sh_parseconf
	else
		evaluate_retval "$?" "1" "${cmsg_falhaAbertura[$LC_DEFAULT]} $app_conf!"
	fi
}

sh_parseconf() {
	last_msg="$(gettext "Analisando o arquivo de configuração"): $app_conf"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"

	url_mirror="${AConfMirror[url_mirror]}"
	[[ -n "${AsUser[cuser]}" && -n "${AsUser[cpass]}" && -n "${AsUser[cpassroot]}" && -n "${AsUser[chostname]}" ]] && LEXTRA=$true
	[[ -n "${AConfLocale[_TIMEZONE]}" ]] && LTIMEZONE=$true
	[[ -n "${AConfLocale[_KEYMAP]}" ]] && LKEYMAP=$true
	[[ -n "${AConfMirror[_MIRROR]}" && -n "$url_mirror" ]] && LMIRROR=$true
	[[ -n "${Amntpoint[*]}" ]] && LPARTITION=$true
	[[ -n $_DEVICE ]] && LDISK=$true
	[[ -n $_BOOTLOADER ]] && LGRUB=true
	[[ -n ${_WINDOWMANAGER[*]} ]] && LWM=$true
	[[ -n $_SOURCE ]] && LSOURCE=$true
}

sh_mkefiroaming() {
	#Caminho de inicialização padrão/reserva
	if [[ -e "$dir_install/boot/efi/EFI/$cnickefi/grubx64.efi" ]]; then
		last_msg="${cmsg_CriandoDiretorios[$LC_DEFAULT]}: $dir_install/boot/efi/EFI/BOOT"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
		mkdir -p "$dir_install/boot/efi/EFI/BOOT" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"

		last_msg="${cmsg_CopiandoCaminhoReserva[$LC_DEFAULT]}: $dir_install/boot/efi/BOOT"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
		cp "$dir_install/boot/efi/EFI/$cnickefi/grubx64.efi" "$dir_install/boot/efi/EFI/BOOT/BOOTX64.EFI" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"
	fi
}

sh_getBootEFI() {
	if [ -e /sys/firmware/efi/systab ]; then
		TARGET_EFI=x86_64-efi
		[[ "$(</sys/firmware/efi/fw_platform_size)" -eq 32 ]] && TARGET_EFI=i386-efi
		return 0
	fi
	return 1
}

sh_choosewm() {
	declare -A aFlag
	declare -A aWm
	local x

    if [[ "$_SOURCE" = "local" ]]; then
        alerta "$ccabec" "Instalação escolhida foi via local/ISO, não é necessário alterar nada aqui"
	  	_WINDOWMANAGER='tty'
        LWM=$true
        return
    fi

	aWm[tty]="${cmsg_tty[LC_DEFAULT]}"
	aWm[awesome]="Awesome"
	aWm[blackbox]="Blackbox"
	aWm[bspwm]="Tiling window manager based on binary space partitioning"
	aWm[dwm]="Dwm"
	aWm[enlightenment]="Enlightenment desktop shell"
	aWm[fluxbox]="Fluxbox"
	aWm[gnome]="Gnome"
	aWm[hyprland]="Dynamic wlroots-based tiling Wayland compositor"
	aWm[i3wm]="i3wm"
	aWm[lxde]="The 'Lightweight X11 Desktop Environment'"
	aWm[lxqt]="The 'Lightweight Qt Desktop Environment'"
	aWm[mate]="Mate"
	aWm[openbox]="Openbox"
	aWm[plasma]="Kde Plasma-Desktop"
	aWm[sway]="Sway"
	aWm[twm]="Twm"
	aWm[xfce4]="Xfce4"

	for x in "${!aWm[@]}"; do
		aFlag[$x]='off'
	done

	for x in "${_WINDOWMANAGER[@]}"; do
		aFlag[$x]='on'
	done

	wm=$(${DIALOG} --title "=== ${cmsg_Wm[$LC_DEFAULT]^^} ===" \
		--default-item "$_WINDOWMANAGER" \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--checklist "${cmsg_MENU[$LC_DEFAULT]}" \
		0 0 0 \
		tty "${aWm[tty]}" "${aFlag[tty]}" \
		awesome "${aWm[awesome]}" "${aFlag[awesome]}" \
		bspwm "${aWm[bspwm]}" "${aFlag[bspwm]}" \
		dwm "${aWm[dwm]}" "${aFlag[dwm]}" \
		blackbox "${aWm[blackbox]}" "${aFlag[blackbox]}" \
		fluxbox "${aWm[fluxbox]}" "${aFlag[fluxbox]}" \
		enlightenment "${aWm[enlightenment]}" "${aFlag[enlightenment]}" \
		gnome "${aWm[gnome]}" "${aFlag[gnome]}" \
		hyprland "${aWm[hyprland]}" "${aFlag[hyprland]}" \
		i3wm "${aWm[i3wm]}" "${aFlag[i3wm]}" \
		lxde "${aWm[lxde]}" "${aFlag[lxde]}" \
		lxqt "${aWm[lxqt]}" "${aFlag[lxqt]}" \
		mate "${aWm[mate]}" "${aFlag[mate]}" \
		openbox "${aWm[openbox]}" "${aFlag[openbox]}" \
		plasma "${aWm[plasma]}" "${aFlag[plasma]}" \
		sway "${aWm[sway]}" "${aFlag[sway]}" \
		twm "${aWm[twm]}" "${aFlag[twm]}" \
		xfce4 "${aWm[xfce4]}" "${aFlag[xfce4]}" \
		2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return
		;;
	esac
	HYPRLAND=$false
	if conf "=== ${cmsg_Wm[LC_DEFAULT]^^} ===" \
			"\n${BOLD}${WHITE}$(gettext "Uma instalação customizada irá instalar pacotes extras e também")" \
			"\n$(gettext "fazer diversas configurações, evitando faze-las manualmente posteriormente.")\n" \
			"\n${BOLD}${RED}$(gettext "Customizar a instalação?")\n\n"; then
		LCUSTOM=true
	else
		LCUSTOM=false
	fi
	_WINDOWMANAGER=($(strtoarray "$wm"))
	if grep -qi hyprland <<< "${_WINDOWMANAGER[@]}"; then
		HYPRLAND=$true
	fi
	LWM=$true
}

function pcount() {
	local -i nargs="$#"
	echo $nargs
	[[ nargs -gt 0 ]] && return 0 || return 1
}

strtoarray() {
	local anew
	IFS=' ' read -r -a anew <<<"$1"
	echo "${anew[@]}"
}

lenarraystr() {
	local new=$1
	read -ra ADDR <<<"$new"
	echo "${#ADDR[@]}"
}

sh_chooseKeymap() {
	if notconf "=== ${cmsg_Teclado[$LC_DEFAULT]^^} ===" "${cmsg_LayoutAtual[$LC_DEFAULT]} : \Zb\Z1${AConfLocale[_KEYMAP]}${RESET}" "\n\n${cmsgSetKeyboardLayout[$LC_DEFAULT]}?"; then
		LKEYMAP=$true
		return 0
	fi
	localectl 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	if [ "${PIPESTATUS[0]}" -eq 0 ]; then
		items=$(localectl list-keymaps | sort -V)
	else
		items=$(find /usr/share/kbd/keymaps/ -iname "*.gz" -type f -printf "%f\n" | sort -V)
	fi
	options=()

	for item in ${items}; do
		options+=("${item%%.*}" "")
	done

	keymap=$(${DIALOG} \
		--colors \
		--default-item "${AConfLocale[_KEYMAP]}" \
		--backtitle "${ccabec}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--title "${cmsg_descTeclado[$LC_DEFAULT]}" \
		--menu "${cmsg_MENU[$LC_DEFAULT]}" \
		0 70 0 \
		"${options[@]}" 3>&1 1>&2 2>&3)

	nchoice=$?
	if ! ((nchoice)); then
		loadkeys "$keymap"
		AConfLocale[_KEYMAP]="$keymap"
		LKEYMAP=$true
	fi
	return $nchoice
}

sh_chmod_tmp() {
	local cfile="$dir_install/etc/runit/core-services/03-filesystems.sh"

	last_msg="${cmsg_Ajustando[$LC_DEFAULT]} ${cmsg_Permissoes[$LC_DEFAULT]} ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	if [[ -e "$cfile" ]]; then
		{
			echo ''
			echo 'msg $(gettext "Ajustando permissões para") /tmp and /var/tmp ...'
			echo 'mkdir -p /tmp /var/tmp'
			echo 'chmod 1777 /tmp /var/tmp'
		} >>"$cfile"
	fi
	evaluate_retval "$?" "$err_not_fatal"
}

sh_copy_scripts() {
	local cfiles=(	void-chroot
					void-clonedisk
					void-gitclone
					void-install
					void-maketar
					void-mirror
					void-parted
					void-remove-vg
					void-runimage
					void-services
					void-testmirror
					void-wifi
					void-xrandr
					)
	local script

	last_msg="${cmsg_Copiando[$LC_DEFAULT]} scripts ${cmsg_Para[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	for script in "${cfiles[@]}"; do
		if [[ -e "$script" ]]; then
			cp -f "$script" "$dir_install/usr/bin/" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		fi
	done
	evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"
}

display_config() {
	sh_disk_part_info
	SETUP="\
                            			  \n$(padr "${cmsg_Extra2[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0${AsUser[cuser]} - [${AsUser[cfullname]}] ${RESET}\
                                      \n$(padr "${cmsg_Extra3[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0$(sh_gethidden-password "${AsUser[cpass]}")${RESET}\
                                      \n$(padr "${cmsg_Extra4[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0$(sh_gethidden-password "${AsUser[cpassroot]}")${RESET}\
                                                         \n$(padr "Hostname :" 30 ' ') \Zb\Z0${AsUser[chostname]}${RESET}\
                                     \n$(padr "${cmsg_Teclado[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0${AConfLocale[_KEYMAP]}${RESET}\
                                                         \n$(padr "Timezone :" 30 ' ') \Zb\Z0${AConfLocale[_TIMEZONE]}${RESET}\
     \n$(padr "${cmsg_redewifi[$LC_DEFAULT]} (${cmsg_opcional[LC_DEFAULT]}) :" 30 ' ') \Zb\Z0${AConfWifi[_NETWORK]}${RESET}\
    \n$(padr "${cmsg_senhawifi[$LC_DEFAULT]} (${cmsg_opcional[LC_DEFAULT]}) :" 30 ' ') \Zb\Z0$(sh_gethidden-password "${AConfWifi[_PASSWORD]}")${RESET}\
                                      \n$(padr "${cmsg_Mirror[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0${AConfMirror[url_mirror]} - ${AConfMirror[location]}${RESET}\
                                      \n$(padr "${cmsg_Source[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0${AConfMirror[_SOURCE]}${RESET}\
                                      \n$(padr "${cmsg_Extra6[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0${AConfDisk[_DEVICE]} | $(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" 2) | $(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" 4)${RESET}\
                  \n$(padr "${cmsg_BootLoader[$LC_DEFAULT]} (${_DISKTABLE}) :" 30 ' ') \Zb\Z0${AConfDisk[_BOOTLOADER]} | $(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" 2) | $(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" 4)${RESET}\
                                          \n$(padr "Detect SO's (os-prober) :" 30 ' ') \Zb\Z0$(sh_getyes "${AConfDisk[_OSPROBER]}")${RESET}\
                                     \n$(padr "${cmsg_Extra11[$LC_DEFAULT]} :" 30 ' ') \Zb\Z0"${_WINDOWMANAGER[*]}"${RESET}\
                                                     \n$(padr "Customizacao :" 30 ' ') \Zb\Z0$(sh_getTrueFalse "$LCUSTOM")${RESET}\
                                                              \n$(padr "Fde :" 30 ' ') \Zb\Z0$(sh_getinfoFde "$LFDE")${RESET}\
                                                              \n$(padr "Lvm :" 30 ' ') \Zb\Z0$(sh_getinfoFde "$LVM")${RESET}\
                                            \n$(padr "FileSystem/Mountpoint :" 30 ' ') \Zb\Z7↓↓↓\
                                                       \n\Zb\Z4$(sh_getmntpoint)${RESET}${RESET}"
}

sh_getTrueFalse() {
  local var="$1"
  [[ "$var" == 'true' ]] && echo 'Sim' || echo 'Nao'
 }

sh_getinfoFde() {
	local lfde="$1"
	local str
	local _vg
	str="$(sh_getyes "$lfde")"
	_vg="${AConfFde[vg]}"

	case $lfde in
	1)
		str+="|$_vg|${AConfFde[partition]}|/$_vg/root=${AConfFde[lvroot]}"
		[[ -n "${AConfFde[lvswap]}" ]] && str+="|/$_vg/swap=${AConfFde[lvswap]}"
		[[ -n "${AConfFde[lvvar]}" ]] && str+="|/$_vg/var=${AConfFde[lvvar]}"
		[[ -n "${AConfFde[lvhome]}" ]] && str+="|/$_vg/home=${AConfFde[lvhome]}"
		;;
	esac
	echo "$str"
}

sh_getmntpoint() {
	local str
	local nlen=13
	local sep="\xe2\x94\x82"

	str+="\
$(printf "%-${nlen}s" PARTITION)	\
$(printf "$sep%-${nlen}s" FSTYPE)	\
$(printf "$sep%-${nlen}s" SIZE)	\
$(printf "$sep%-${nlen}s" LABEL)	\
$(printf "$sep%-${nlen}s" MOUNTPOINT)	\
$(printf "$sep%-${nlen}s" NEWFSTYPE)	\
$(printf "$sep%-${nlen}s" FORMAT)"
	str+="\n"

	for i in $(echo "${!Amntpoint[@]}" | tr ' ' '\n' | sort); do
		str+="$(printf "%-${nlen}s" "$i")	\
$(printf "$sep%-${nlen}s" "$(sh_splitarray "${AARRAY_PART_DEVICES[$i]}" 7)")	\
$(printf "$sep%-${nlen}s" "$(sh_splitarray "${AARRAY_PART_DEVICES[$i]}" 2)")	\
$(printf "$sep%-${nlen}s" "$(sh_splitarray "${AARRAY_PART_DEVICES[$i]}" 5)")	\
$(printf "$sep%-${nlen}s" "$(sh_splitarray "${Amntpoint[$i]}" 1)")	\
$(printf "$sep%-${nlen}s" "$(sh_splitarray "${Amntpoint[$i]}" 2)")	\
$(printf "$sep%-${nlen}s" "$(sh_getyes "$(sh_splitarray "${Amntpoint[$i]}" 3)")")"
		str+="\n"
	done
	echo "$str"
}

sh_gethidden-password() {
	local senha="$1"
	echo -e "${senha//?/*}"
}

sh_checkInstall() {
	local cmdsearch

	if [ -z "$LMIRROR" ]; then
		alerta "${cmsg_Mirror[$LC_DEFAULT]^^}" "${cmsg_Mirror[$LC_DEFAULT]} ${cmsg_NotConfDefault[$LC_DEFAULT]}"
		DEFITEM="${cmsg_Mirror[$LC_DEFAULT]}"
		return 1
	elif [ -z "$LSOURCE" ]; then
		alerta "SOURCE" "${cmsg_Source[$LC_DEFAULT]} ${cmsg_NotConfDefault[$LC_DEFAULT]}"
		DEFITEM="${cmsg_Source[$LC_DEFAULT]}"
		return 1
	elif [ -z "$LGRUB" ]; then
		alerta "${cmsg_BootLoader[$LC_DEFAULT]^^}" "${cmsg_NotConfBootLoader[$LC_DEFAULT]}"
		DEFITEM="${cmsg_BootLoader[$LC_DEFAULT]}"
		return 1
	elif ! sh_validate_filesystem; then
		DEFITEM="FileSystem"
		return 1
	elif [ -z "$LKEYMAP" ]; then
		alerta "${cmsg_Teclado[$LC_DEFAULT]^^}" "${cmsg_NotConfTeclado[$LC_DEFAULT]}"
		DEFITEM="${cmsg_Teclado[$LC_DEFAULT]}"
		return 1
	elif [ -z "$LTIMEZONE" ]; then
		alerta "TIMEZONE" "${cmsg_NotConfTimezone[$LC_DEFAULT]}"
		DEFITEM="Timezone"
		return 1
	elif [ -z "$LWM" ]; then
		alerta "WM" "${cmsg_NotConfWm[$LC_DEFAULT]}"
		DEFITEM="Wm"
		return 1
		#	elif [ -z "$LWIFI" ]; then
		#		alerta "WIFI" "${cmsg_NotConfWifi[$LC_DEFAULT]}"
		#		DEFITEM="Wifi"
		#		return 1
	elif [ -z "$LEXTRA" ]; then
		alerta "EXTRA" "${cmsg_NotConfExtra[$LC_DEFAULT]}"
		DEFITEM="Extra"
		return 1
	fi

	display_config
	if conf "${cmsg_ConfSalva[LC_DEFAULT]^^}" "$SETUP " \
		"${RESET}\n${cmsg_AcompanheInstalacao[LC_DEFAULT]} : ${BLUE}sudo tail -f $BOOTLOG${RESET}" \
		"\n${cmsg_OuPeloTerminal[LC_DEFAULT]}                : ${BLUE}(ctrl+alt+f8)${RESET}" \
		"\n\n${BOLD}${WHITE}${cmsg_descInstalar[$LC_DEFAULT]}?"; then
		clear
		return 0
	fi
	return 1
}

sh_grubInstall() {
	local xuuidfde

#	echo "GRUB_THEME=/boot/grub/themes/void/theme.txt" >>"$dir_install/etc/default/grub"
	echo "GRUB_THEME=/boot/grub/themes/chili/theme.txt" >>"$dir_install/etc/default/grub"
	if ((LOSPROBER)); then
		echo "GRUB_DISABLE_OS_PROBER=false" >>"$dir_install/etc/default/grub"
	else
		echo "GRUB_DISABLE_OS_PROBER=true" >>"$dir_install/etc/default/grub"
	fi

	if ((LFDE)); then
		sh_chroot_job "Alterando /etc/default/grub" "sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=/#&/' /etc/default/grub"
		xuuidfde=$(blkid -o value -s UUID "${AConfFde[partition]}")
		{
			echo "GRUB_CMDLINE_LINUX_DEFAULT='splash quiet udev.log_priority=3 libata.noacpi=1 loglevel=4 rd.luks.allow-discards rd.lvm.vg=${AConfFde[vg]} rd.luks.uuid=$xuuidfde'"
			echo "GRUB_ENABLE_CRYPTODISK=y"
		} >>"$dir_install/etc/default/grub"

		sh_chroot_job "Criando chave aleatória" "dd bs=1 count=64 if=/dev/urandom of=/boot/volume.key"
		sh_chroot_job "Adicionando a chave ao volume cryptografado" "printf ${AConfFde[passphrase]} | cryptsetup luksAddKey ${AConfFde[partition]} /boot/volume.key --key-file=-"
		sh_chroot_job "Alterando permissões para proteger a chave" "chmod 000 /boot/volume.key; chmod -R g-rwx,o-rwx /boot"
		echo "${AConfFde[vg]}	UUID=$xuuidfde	/boot/volume.key	luks" >>"$dir_install/etc/crypttab"
		echo 'install_items+=" /boot/volume.key /etc/crypttab "' >>"$dir_install/etc/dracut.conf.d/10-crypt.conf"
	fi

	if ((LBIOS)); then
		sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} GRUB i386-pc ${cmsg_Em[$LC_DEFAULT]} $_BOOTLOADER" \
			"grub-install $_BOOTLOADER --target=i386-pc --recheck"
	fi
	if $LEFI; then
		sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} GRUB EFI ${cmsg_Em[$LC_DEFAULT]} $_BOOTLOADER" \
			"grub-install $_BOOTLOADER --target=$TARGET_EFI --efi-directory=/boot/efi --boot-directory=/boot --bootloader-id=$cnickefi --removable --recheck"
		sh_mkefiroaming
	fi
	if ! ((LVM)); then
		sh_chroot_job "${cmsg_Gerando[$LC_DEFAULT]} grub.cfg ${cmsg_Em[$LC_DEFAULT]} $dir_install" "grub-mkconfig -o /boot/grub/grub.cfg"
	fi
}

confmulti() {
    xtitle="$1"
    shift
    ${DIALOG} \
        --colors \
        --title "$xtitle" \
        --backtitle "$ccabec" \
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
        --yesno "$*" \
        10 60
    nchoice=$?
    return $nchoice
}

sh_execcopia() {
    ORIGEM="/run/rootfsbase/"
    DESTINO="$dir_install/"
    DEST="$dir_install"
    PONT='|/—\' # Ponteiros de um hélice do lado direito
    nVal=0

    sizeof() { du -s "$1" 2>/dev/null | cut -f1; }
    running() { ps "$1" | grep "$1" >/dev/null; }

    TITLE="INSTALL"
    #   INTERVALO=0.001
    INTERVALO=0.5
    #   PORCENTO=0
    DIR_DESTINO="$DESTINO/${ORIGEM##*/}"
    MSG="Aguarde, instalando... if=$ORIGEM of=$DESTINO"
    #   MSG=$(eval echo "$MSG")
    mensagem "Aguarde, computando arquivos para instalar"
    #   TOTAL=$(unsquashfs -ll "$LIVE_DIR" | awk '{n+=$3} END {print n}')
    #   TOTAL=$((TOTAL/1024))
    #  TOTALGB=$((TOTAL/1024))
    TOTAL=$(sizeof "$ORIGEM")
    TOTALGB=$((TOTAL / 1024))
    DISPONIVEL=$(df | grep "${DEST}" | awk '{print $4}' | head -1)
    DISPONIVEL=$((DISPONIVEL / 1024))

    if ((DISPONIVEL < TOTALGB)); then
        if ! confmulti "*** WARNING ***" \
            "\nTamanho da partição destino é menor que o necessário\n" \
            "\nPartição destino   : ${part}" \
            "\nTamanho disponível : ${DISPONIVEL}G" \
            "\nTamanho necessário : ${TOTALGB}G" \
            "\n\nSistema destino poderá não funcionar, continuar?"; then
#           sh_stop_bind
#           sh_stop_mount
#           sh_main_menu "$@"
            return 1
        fi
    fi

    log="/tmp/${_APP_}.log"
    [ -e "$log" ] && rm -f "$log"

    rsync -crav "$ORIGEM" "$DESTINO" 1>&2 >"$log" &
    export CPPID=$!

    #  trap sh_trapErro 2 15
    #trap "kill $CPPID" 2 15
    (
        while running "$CPPID"; do
            ((nval >= 4)) && nval=0
            COPIADO=$(sizeof "$DIR_DESTINO")
            PERCENTAGEM=$((COPIADO * 100 / TOTAL))
            COPIADOMB=$((COPIADO / 1024))
            LASTFILE=$(tail -n1 "$log")
            [[ "$PERCENTAGEM" -gt 100 ]] && PERCENTAGEM=100
            ${DIALOG} --colors \
                --title $TITLE \
                --gauge "$MSG                                       \nFalta ${RED}${REVERSE}$((100 - PERCENTAGEM))%${RESET} para completar a tarefa \Zb\Z1${PONT:nval:1}\ZB\Zn \
                                    \n\nDestino    : ${BLUE}${REVERSE}${AConfDisk[_DEVICE]}$dir_install${RESET}
                                    \nDisponivel : ${DISPONIVEL}MB\
                                    \nTotal      :  ${TOTALGB}MB\
                                    \nCopiado    :  ${BLUE}${REVERSE}${COPIADOMB}MB${RESET}\
                                    \nArquivo    : ${LASTFILE}\
                                    \n" 13 130 0 <<<$PERCENTAGEM
            ((nval++))
            #           sleep $INTERVALO
        done
    )
    return 0
}

sh_cp_rootfs() {
    local lretval
	last_msg="${cmsg_Descompactando[$LC_DEFAULT]} ISO ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
#	cp -Rpva /run/rootfsbase/* $dir_install 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
#   lretval="${PIPESTATUS[0]}"
#	evaluate_retval "$lretval"
    sh_execcopia
    lretval="$?"
	evaluate_retval "$lretval"
	clear
	rm -f $dir_install/etc/issue
	rm -f $dir_install/etc/motd
	return "$lretval"
}

sh_tar_rootfs() {
	local retval
	sh_checkTarball || return 1
	last_msg="${cmsg_Descompactando[$LC_DEFAULT]} rootfs ${cmsg_Em[$LC_DEFAULT]} $dir_install"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	tar xpf "$_TARBALL_ROOTFS" --xattrs-include='*.*' --numeric-owner -C $dir_install 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	if [ "${PIPESTATUS[0]}" -eq 0 ]; then
		evaluate_retval "${PIPESTATUS[0]}"
		return "${PIPESTATUS[0]}"
	else
		evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"
		sh_umount_fs
		if conf "${YELLOW}${_TARBALL_ROOTFS}" "${cmsg_Tarball_Corrompido[$LC_DEFAULT]}"; then
			sh_checkIntegrityTarball || return 1
			sh_install
		else
			die "${cmsg_ERRO[LC_DEFAULT]} tar #$?. ${cmsg_ErroTar[LC_DEFAULT]} $_TARBALL_ROOTFS ${cmsg_Em[LC_DEFAULT]} $dir_install"
		fi
	fi
}

#dom 03 mar 2024 09:35:25 -04
sh_touch_keys() {
	sh_cmd_job  "Criando chaves ${cmsg_Em[$LC_DEFAULT]} $dir_install" "mkdir -p keys"
	cat > keys/60:ae:0c:d6:f0:95:17:80:bc:93:46:7a:89:af:a3:2d.plist <<-EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>public-key</key>
	<data>LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF2clN6QlpNdmd2T0NJM0FYYk9qYQoycktSa0pTVE0zYy9FalRJZ0NnRFhndW05M0JQQ3RZOE1jRlZvQ1U0T2lYSEdmVG1xMzlCVk5wTHZMSEw5S2sxCnAyNzhTQmhYVk90YkIyRVZtREtudmZJREVUbGRMR3plN3JaTlJKZHR1TjJtWi9UVnJVQjlTMHlRYytJdWY0aHYKMytEOTdWSWRUSkhBN0FTcjA0MjhwcEVHSkd3U1NoWTJYSm05RDVJMEV1R1JXYzE0TUVHN2RJS0ppWWlNMG5FNAp0WW8yL3ZINElGVEhkblZBM2dZaVp5RG5idUNBUi84RVNmVVRVMTNTTkNPZGJ1ZGYzRDVCY3krVWlNREpJM1llCjRNRktCclQ5WmhaK0dzWEJaWTQ4MmxxaVppNkNMNXB0YzlJUUZmOC9lS1phOGphdGtpVkZWZ3JLZU5Sak9UeE4KZldTdTJua3hHTlgrYmhYWXRoaUdXbUpFWThjQ0FQeUZOK0x2NVJldEsyNTZnZGNiMnNrbUVxZWZ2MnpQQyt3VgpXQmJkSDViRDRiWmpuME42Wmw4MXJ2NVJ6RHZudmYrdkQxNGFGVWJaOFFGcXU3NVBiTDR3Nm1ZTTRsZE0vZzBSCjZOWEU4QXo5Qnd4MnREZlllS3V1dHcxRXBQbTJZdkZ5VFViMWNveUF1VEdSeUFhcDFVVEh2ZzlsaFBJSm1oRlEKSjVrQ2cxcUQ3QTMxV2wwUmxuZTZoZ0dvMFpaTko1Y0pNL3YvelNUS0pjdUZnd283SDBoT0dpbDZEZm84OUI0agpHOTZBQ3lQUytEVktQRlhSWXdqL0FrYkhwYVEyZjFGTUFvU3BCcXVEcUhoM3VrazcxS1g2ajE5dDBpRjhEUUxyCnZ0RlNTZElqREEwMmx3ZVY5TmFRcFdzQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo=</data>
	<key>public-key-size</key>
	<integer>4096</integer>
	<key>signature-by</key>
	<string>Void Linux</string>
</dict>
</plist>
EOF

	cat > keys/76:75:c9:75:f1:97:35:78:3c:f9:73:d4:f6:04:0b:59.plist <<-EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>public-key</key>
	<data>LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQm9qQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FZOEFNSUlCaWdLQ0FZRUFxRlJBUnpFeVJMMlVJdU1GWkMwOApmSURJUWZrUzVNczRxOXFLUFhQdHMyN01mbDdDNFdoSHZYb2h2MnNKSzV1SThlOXM3OEJUL0gvbTJxallMWjZJCnF1NmNrZFJUZzNpakNYbTFqY21wRGh1eVpqVW5xaUdPcnBjZUpaTEtUZEYxQWRvZTI4NGRTTW92ZUZldVdlMkIKbkI1aml1ZGg4Szg2WThPdXptbldTN29PTWgzK3dMMEQrNHlGRVRrTTF0ckZCUC9GOUprZEx2dHVONWwyUmVJUQpYa0I5NHpIQ3l5dXkyUC9USnlQOFphSG0vckRwV2JJbUZLMzhsa05IcEczS1ZWYnl5bnFkZyszenJnTHNlR0ZXCnBnelFSdTdON3ByRGIvbDVQV3JSQ0tEUDJyWCtKZHFyWXBrUXh6SDNvTnpkZTd2cGFqejU2c2tzaDhUaHBIY2MKU2g3eTN2ZEJ3dHpDZFlqMkd0RlJaRzB4S21TY24rQ0hLR3dGQTdwdkkzVlVISXNLMm9IazlkSWlwZjkxbFMxVQp4ZUo5Y3RlQmdYZFJ0S0E3QXVTVTN0VzFRak1pNGJrWWVxZ1NUTFJueUxtbVYvR2MyT3BEMktOQVpuWnBIM2RrCnNtV25ibC9rZ05qa2NLTVQ2Rm5hSjdYNlJNdHZ4Mi9CWlcwMy9jQ25nRTR6QWdNQkFBRT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==</data>
	<key>public-key-size</key>
	<integer>3072</integer>
	<key>signature-by</key>
	<string>Vilmar Catafesta &lt;vcatafesta@gmail.com&gt;</string>
</dict>
</plist>
EOF

	cat > keys/cc:e6:28:46:ff:19:07:a2:f0:4b:14:15:4f:89:1b:bc.plist <<-EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>public-key</key>
	<data>LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQm9qQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FZOEFNSUlCaWdLQ0FZRUEzcXVPbTNUNnc4RXN1ZnY2cnJIZwp6VTQ0S090dXF1M01HMS81Smd2UmJvb1hzS0swdW8wQkpzOFJaY2RLOWZRRWFNbUtHRUxvQVBiVEVQaGlZc0EzCnNkNy95QUR4bFNVcWR2VUl6Unh3M3E1VXFHNjQ5aFJjNnVHMjdxS2pZL0pxSXF5bGV5bmlaNUR0ejI5cm5Mc2wKTUFyT0YrNElsUk5LMnFHMy85RytETmVsVXFDeFRHQTVUd21DUlN5OXRQZ2dPQ3RnYmRuZjdCbHg4anB4MHo4MAo2RHl2ZDhPZ0ZRWEE4R3l5K2Mzc1N3Tm02Y1ZVUTV2clEzcGhCTnVuSzJDbHJzeE5iRGhzQnNXSklGd1JEeFJnCnpYQlJrSmxxL2M1L0crZTV2d0p1TWl6M09WYlh6TWo4WCtNYk5wMExkVzFVRU5tbmRYU1h3aForUllDQTRNMCsKSm1ZV0VRY0xKdnBIelB5cUZnaVhucnFMOUU0Tm4xK2t3TXZYOWEvTVhQcCtjRk12ajBUd01icWRDTTFGeGl2aQpUNkpCbUxOZG0vOXpQbUs5Yzg2UHRGVWNaaCtaV0NRMHBjTmRSWm5NZzJxVmdHUUdkeXFNQVN4QldpeVZrSHdHClkzSUcwZ3VaeVNJVnZmU0cyc0ZsQmZDWk9yK0pqNHNEbWhITXlNdlpoZGdGQWdNQkFBRT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==</data>
	<key>public-key-size</key>
	<integer>3072</integer>
	<key>signature-by</key>
	<string>Vilmar Catafesta &lt;vcatafesta@gmail.com&gt;</string>
</dict>
</plist>
EOF
}

#dom 03 mar 2024 09:35:25 -04
sh_copy_keys() {
	sh_touch_keys
	sh_cmd_job  "Copiando chaves ${cmsg_Em[$LC_DEFAULT]} $dir_install" "mkdir -p $dir_install/var/db/xbps/keys"
	cp -f /var/db/xbps/keys/*.plist "$dir_install/var/db/xbps/keys/" >/dev/null 2>&-
	cp -f keys/*.plist "$dir_install/var/db/xbps/keys/" >/dev/null 2>&-
}

#dom 03 mar 2024 09:35:25 -04
sh_install_prereqs() {
#	REQUIRED_PKGS="base-files xbps libgcc dash coreutils sed tar gawk grub-i386-efi grub-x86_64-efi binutils device-mapper dhclient dracut-network openresolv"
#	REQUIRED_PKGS="base-container-full xbps libgcc dash coreutils sed tar gawk grub-i386-efi grub-x86_64-efi binutils device-mapper dhclient dracut-network openresolv"
#	REQUIRED_PKGS="base-voidstrap xbps libgcc dash coreutils sed tar gawk grub-i386-efi grub-x86_64-efi binutils device-mapper dhclient dracut-network openresolv"
	REQUIRED_PKGS="base-voidstrap" # xbps tar xz"

	sh_cmd_job  "Instalando bootstrap ${cmsg_Em[$LC_DEFAULT]} $dir_install" \
				"LC_ALL=C xbps-install --rootdir "$dir_install" --repository=${url_mirror}current -c $CACHEDIR -y $REQUIRED_PKGS -S"
}

#dom 03 mar 2024 09:35:25 -04
sh_extract_root_fs() {
	if [[ "$_SOURCE" = "local" ]]; then
		sh_cp_rootfs
	elif [[ "$_SOURCE" = "network" ]]; then
		sh_tar_rootfs
	elif [[ "$_SOURCE" = "networkFull" ]]; then
		sh_install_prereqs
	fi
}

sh_install() {
	local user="${AsUser[cuser]}"
	local start_datetime
	local end_datetime
	local akernel=(linux dbus)
	local afirmware=(wifi-firmware)
	local abase=(zstd xz cryptsetup lvm2 wireless_tools wpa_supplicant)
	local agrub=(grub os-prober grub-i386-efi grub-x86_64-efi grub-utils)

	if $LCUSTOM; then
	  abase+=(socklog-void openntpd)
	  agrub+=(grub-terminus grub-btrfs-runit)
	fi

	ncounter=0
	sh_checkInstall || return 1
#	dialog --title $BOOTLOG --begin 1 0 --tailbox "$BOOTLOG" 20 0 &
	reset
	sh_checkNet "$url_mirror" || return 1
	if [[ "$_SOURCE" = "network" ]]; then
    sh_checkTarball
  fi
	sh_choose_packages
	start_time=$(date +%s) # Obtém o tempo de início em segundos desde a época Unix
	start_datetime=$(date)

	if $LEFI; then
		if sh_getBootEFI; then
			agrub+=(grub-"$TARGET_EFI")
			agrub+=(efivar)
			agrub+=(efibootmgr)
		else
			LEFI=false
			LBIOS=$true
		fi
	fi

	{
		sh_umount_fs
		if ! sh_make_fs; then die "Erro"; fi
		sh_mount_fs
		sh_mk_working_dir

		sh_copy_keys
		if sh_extract_root_fs; then
			sh_init_bind
			last_msg="${cmsg_Copiando[$LC_DEFAULT]} /etc/resolv.conf ${cmsg_Em[$LC_DEFAULT]} $dir_install"
			msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
			cp /etc/resolv.conf "$dir_install/etc/" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
			evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"
			sh_update_mirror
#			sh_checkNet "$url_mirror" || return 1

			# Go install
			sh_chroot_job "${cmsg_Atualizando[$LC_DEFAULT]} xbps ${cmsg_Em[$LC_DEFAULT]} $dir_install"               "LC_ALL=C xbps-install --sync --update xbps --yes"
			sh_chroot_job "${cmsg_AtualizandoRepositorio[$LC_DEFAULT]} ${cmsg_Em[$LC_DEFAULT]} $dir_install"         "LC_ALL=C xbps-install --sync --update --yes"
			if [[ "$_SOURCE" = "local" ]]; then
        sh_chroot_job "${cmsg_AtualizandoPacotesBase[$LC_DEFAULT]} ${cmsg_Em[$LC_DEFAULT]} $dir_install"      "${XBPS_INSTALL_UNPACK_ONLY} ${agrub[*]}"
			else
        sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Kernel ${cmsg_Em[$LC_DEFAULT]} $dir_install"           "${XBPS_INSTALL_UNPACK_ONLY} ${akernel[*]}"
  			sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Grub ${cmsg_Em[$LC_DEFAULT]} $dir_install"             "${XBPS_INSTALL_UNPACK_ONLY} ${agrub[*]}"
   			sh_chroot_job "${cmsg_AtualizandoPacotesBase[$LC_DEFAULT]} ${cmsg_Em[$LC_DEFAULT]} $dir_install"      "${XBPS_INSTALL_UNPACK_ONLY} ${abase[*]}"
#  			sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} Wifi Firmware ${cmsg_Em[$LC_DEFAULT]} $dir_install"    "${XBPS_INSTALL_UNPACK_ONLY} ${afirmware[*]}"
        if [[ -n "$_PKGS" ]]; then
     			sh_chroot_job "${cmsg_AtualizandoPacotesAdicionais[$LC_DEFAULT]} $dir_install"                        "${XBPS_INSTALL_UNPACK_ONLY} $_PKGS"             "$err_not_fatal" "$err_not_fatal"
        fi
   			sh_chroot_job "$(gettext "Instalando Daemons em") $dir_install"                                       "${XBPS_INSTALL_UNPACK_ONLY} ${aDaemons[*]}"     "$err_not_fatal" "$err_not_fatal"
   			sh_chroot_job "$(gettext "Instalando Editores texto em") $dir_install"                                "${XBPS_INSTALL_UNPACK_ONLY} ${aEditorTxt[*]}"   "$err_not_fatal" "$err_not_fatal"
   			sh_chroot_job "$(gettext "Instalando Downloaders em") $dir_install"                                   "${XBPS_INSTALL_UNPACK_ONLY} ${aDownloader[*]}"  "$err_not_fatal" "$err_not_fatal"
   			sh_chroot_job "$(gettext "Instalando Utilitários em") $dir_install"                                   "${XBPS_INSTALL_UNPACK_ONLY} ${aUtility[*]}"     "$err_not_fatal" "$err_not_fatal"
   			sh_chroot_job "$(gettext "Instalando Archiver's tty em") $dir_install"                                "${XBPS_INSTALL_UNPACK_ONLY} ${aArchiverTty[*]}" "$err_not_fatal" "$err_not_fatal"
        if [[ -n "$_EXTRAS" ]]; then
  		    sh_chroot_job "$(gettext "Instalando Extras's em") $dir_install"                                      "${XBPS_INSTALL_UNPACK_ONLY} $_EXTRAS"           "$err_not_fatal"
        fi
      fi
   		sh_update_bashrc
    	sh_grubInstall
 			#sh_copy_scripts
	   	sh_make_fstab
    	sh_make_user
    	sh_update_hostname
    	sh_update_rc_local
    	sh_update_sshd
    	sh_update_rc_conf
    	sh_update_locale

    	sh_chroot_job "${cmsg_Configurando[$LC_DEFAULT]} locales ${cmsg_Em[$LC_DEFAULT]} $dir_install" "xbps-reconfigure --force glibc-locales"
    	sh_update_wpa_suplicant

			_ONLY_TTY=$false
			if [[ "${#_WINDOWMANAGER[@]}" -eq 1 ]]; then
				if [[ "${_WINDOWMANAGER}" = 'tty' ]]; then
					_ONLY_TTY=$true
					:
				else
					sh_update_Xkeymap
					sh_X11minimal
				fi
			else
				sh_update_Xkeymap
				sh_X11minimal
			fi

			for x in "${_WINDOWMANAGER[@]}"; do
				case "$x" in
				"tty") : ;;
				"awesome") sh_awesomeminimal ;;
				"bspwm")
					sh_bspwmminimal
#					sh_make_bspwm_conf
					;;
				"blackbox") sh_blackboxminimal ;;
				"dwm") sh_dwmminimal ;;
				"enlightenment") sh_enlightenmentminimal ;;
				"fluxbox") sh_fluxboxminimal ;;
				"hyprland") sh_hyprlandminimal ;;
				"openbox") sh_openboxminimal ;;
				"gnome") sh_gnomeminimal ;;
				"plasma") sh_plasmaminimal ;;
				"xfce4") sh_xfce4minimal ;;
				"i3wm") sh_i3minimal ;;
				"sway") sh_swayminimal ;;
				"twm") sh_twmminimal ;;
				"mate") sh_mateminimal ;;
				"lxde") sh_lxdeminimal ;;
				"lxqt") sh_lxqtminimal ;;
				esac
			done

            if [[ $_AUDIOSERVER = 'Pipewire' ]]; then
                sh_activating_pipewire
            fi

			sh_activating_services
			sh_chroot_job "${cmsg_RemovendoPacotesAntigosObseletos[$LC_DEFAULT]} ${cmsg_Em[$LC_DEFAULT]} $dir_install" "xbps-remove --clean-cache --remove-orphans --yes"
			sh_chroot_job "Certificando que todos pacotes estejam configurados corretamente em $dir_install" "xbps-reconfigure --force --all"
#			if ((LVM)); then
#				sh_chroot_job "Certificando que todos pacotes estejam configurados corretamente em $dir_install" "xbps-reconfigure --force --all"
#			fi
			if ((HYPRLAND)); then
				sh_chroot_job "${cmsg_Instalando[$LC_DEFAULT]} User into group _seatd ${cmsg_Em[$LC_DEFAULT]} $dir_install" "usermod -aG _seatd "$user"}" "$err_not_fatal"
			fi
			sh_chmod_tmp
			sh_umount_fs
			end_datetime=$(date)
			alerta "$APP" "${cmsg_FinalizadaComSucesso[LC_DEFAULT]}\n" \
				"Start Date time  : $start_datetime" \
				"Finish Date Time : $end_datetime" \
				"Time elapsed     : ${RED}$(sh_time_elapsed)"
		else
			die "${cmsg_ERRO[LC_DEFAULT]} tar #$?. ${cmsg_ErroTar[LC_DEFAULT]} $_TARBALL_ROOTFS ${cmsg_Em[LC_DEFAULT]} $dir_install"
		fi
		exit 0
	} # > out & sh_monitor
#	killall dialog
}

sh_time_elapsed() {
	local end_time=$(date +%s)                # Obtém o tempo de término em segundos desde a época Unix
	local duration=$((end_time - start_time)) # Calcula a duração em segundos
	local hours=$((duration / 3600))
	local minutes=$(((duration % 3600) / 60))
	local seconds=$((duration % 60))

	# Formatar os valores para terem sempre dois dígitos
	hours=$(printf "%02d" $hours)
	minutes=$(printf "%02d" $minutes)
	seconds=$(printf "%02d" $seconds)
	echo "$hours:$minutes:$seconds"
}

sh_monitor_old() {
	${DIALOG} \
		--clear \
		--backtitle "$ccabec" \
		--title "$BOOTLOG" \
		--tailbox $BOOTLOG 20 120
}

sh_monitor() {
	${DIALOG} \
		--clear \
		--colors \
		--title "$BOOTLOG" \
		--begin 10 10 --tailboxbg $BOOTLOG 20 120 \
		--and-widget \
		--begin 3 10 --progressbox "$last_msg" 5 30
}

sh_getLocale() {
	local lc

	LC_DEFAULT="${Alanguage[pt_BR]}"
	LOCALE="pt_BR"
	#	if lc=$(grep _ <(locale -a) | head -1 | cut -c1-5); then
	#		LOCALE="$lc"
	#		LC_DEFAULT="${Alanguage[$lc]}"
	#	fi
}

sh_setMknodTty() {
	if [[ -c "$LOGGER" ]]; then
		return 0
	fi
	mknod -m 0620 /dev/tty8 c 4 8
	chown --reference=/dev/tty0 /dev/tty8
}

sh_seekstrarray() {
	local str=("$1")
	local search="$2"
	local result=

	for i in "${!str[@]}"; do
		if [[ "${str[$i]}" == "$search" ]]; then
			result="$i"
			break
		fi
	done
	echo "$result"
}

sh_splitarray() {
	local str=("$1")
	local pos="$2"
	local sep="${3:-'|'}"
	local array

	[[ $# -eq 3 && "$pos" = "|" && "$sep" =~ ^[0-9]+$ ]] && {
		sep="$2"
		pos="$3"
	}
	[[ $# -eq 2 && "$pos" = "$sep" ]] && {
		sep="$pos"
		pos=1
	}
	[[ $# -eq 1 || ! "$pos" =~ ^[0-9]+$ ]] && { pos=1; }

	IFS="$sep" read -r -a array <<<"$str"
	echo "${array[pos - 1]}"
}

sh_validate_filesystem() {
	local mntpoint
	local fstype
	local rootfound=0
	local homefound=0
	local varfound=0
	local bootfound=0
	local swapfound=0
	local dsk
	local ext=$(sh_getNvme)
	local flag
	local oldfstype

	sh_disk_part_info
	mensagem "$(gettext "=== DISCO/PARTIÇÃO ===")" "\n\n${BOLD}${WHITE}$(gettext "Aguarde... Verificando disco e partições")"

	for i in "${!Amntpoint[@]}"; do
		_PART="$i"
		dsk="${_PART%%[p0-9]*([0-9])}"
		device="${AARRAY_DSK_DEVICES[$dsk]}"
		tran="$(sh_splitarray "${AARRAY_DSK_DEVICES[$dsk]}" 3)"
		partition="$(sh_splitarray "${AARRAY_PART_DEVICES[$_PART]}" 1)"
		oldfstype="$(sh_splitarray "${AARRAY_PART_DEVICES[$_PART]}" 7)"
		flag="$(sh_splitarray "${AARRAY_PART_DEVICES[$_PART]}" 8)"
		mntpoint="$(sh_splitarray "${Amntpoint[$_PART]}" 1)"
		fstype="$(sh_splitarray "${Amntpoint[$_PART]}" 2)"

		if [[ -z "$device" ]]; then
			${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} The disk configured in the file ($app_conf) does not exist in the system!\n\n\
${BOLD}${WHITE}Device : ${RED}$dsk\n" 8 75
			return 1
		fi

		if [[ -z "$partition" ]]; then
			${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} The partition configured in the file ($app_conf) does not exist in the system!\n\n\
${BOLD}${WHITE}Partition : ${RED}$_PART\n" 8 75
			return 1
		fi
	done

	if [[ -z "$_BOOTLOADER" || -z "$LGRUB" ]]; then
		alerta "${cmsg_BootLoader[$LC_DEFAULT]^^}" "${cmsg_NotConfBootLoader[$LC_DEFAULT]}"
		DEFITEM="${cmsg_BootLoader[$LC_DEFAULT]}"
		return 1
	fi

	[[ "$(sh_getBootEFI)" ]] && LEFI=true || LEFI=false
	LBIOS=$true

	if $LEFI; then
		if [[ "$(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" 7)" != "gpt" ]]; then
			if ! infoconf "${cmsg_Disco[$LC_DEFAULT]}" "$(fdisk -l "$_BOOTLOADER")" \
				"${YELLOW}=== UEFI ===" "\n${BOLD}${RED}NOTICE: ${RESET}\
The system is enabled for UEFI booting, but the chosen bootloader disk has no gpt table.\n\
Redo the partition table in gpt or choose another disk.\n\n\
${BOLD}${WHITE}Continue with installation without UEFI ?"; then
				return 1
			fi
			LEFI=false
		fi
	fi

	if $LEFI; then
		for i in {0..9}; do
			[[ "$(sh_splitarray "${AARRAY_PART_DEVICES[${_BOOTLOADER}${ext}${i}]}" 8)" = "BIOS boot" ]] && {
				LBIOS=$true
				break
			} || LBIOS=$false
		done
		if ! ((LBIOS)); then # alguns device block em lvm não são detectados pelo lsblk
			[[ -n "$(sh_splitarray "${AARRAY_PART_DEVICES[${_BOOTLOADER}${ext}1]}" 8)" ]] && LBIOS=$true
		fi
	fi

	for i in "${!Amntpoint[@]}"; do
		_PART="$i"
		dsk="${_PART%%[p0-9]*([0-9])}"
		tran="$(sh_splitarray "${AARRAY_DSK_DEVICES[$dsk]}" 3)"
		oldfstype="$(sh_splitarray "${AARRAY_PART_DEVICES[$_PART]}" 7)"
		flag="$(sh_splitarray "${AARRAY_PART_DEVICES[$_PART]}" 8)"
		mntpoint="$(sh_splitarray "${Amntpoint[$_PART]}" 1)"
		fstype="$(sh_splitarray "${Amntpoint[$_PART]}" 2)"

		if [ "$mntpoint" = "/" ]; then
			((++rootfound))
			_PART_ROOT="$i"
			_ROOT_FSTYPE="$fstype"
		elif [ "$mntpoint" = "/home" ]; then
			((++homefound))
			_PART_HOME="$i"
		elif [ "$mntpoint" = "/var" ]; then
			((++varfound))
			_PART_VAR="$i"
		elif [ "$fstype" = "vfat" -a "$mntpoint" = "/boot/efi" ]; then
			if $LEFI; then
				if [[ "$flag" != "EFI System" ]]; then
					if ! conf "=== UEFI ===" "${BOLD}${RED}ERROR:${RESET} Could not verify selected partition for mountpoint ${BOLD}${BLUE}/boot/efi${RESET}\n\
whether it has the ${RED}'esp'${RESET} flag required for this purpose.\n
However flag of ${RED}'lvm disk'${RESET} partitions are not detected by lsblk.\n\
${RED}Change${RESET} the partition flag or continue install if you are sure it exists.\n\n\
Type disk     : ${BOLD}${WHITE}${tran}${RESET}\n\
Partition     : ${BOLD}${WHITE}${_PART}${RESET}\n\
mntpoint      : ${BOLD}${WHITE}${mntpoint}${RESET}\n\
current flag  : ${BOLD}${WHITE}${flag}${RESET}\n\
flag required : ${BOLD}${WHITE}EFI System${RESET}\n\
oldfstype     : ${BOLD}${WHITE}${oldfstype}${RESET}\n\
newfstype     : ${BOLD}${WHITE}${fstype}\n\n\
Do you wish to continue install ?"; then
						return 1
					fi
				fi
			fi
			if [[ "$dsk" != "$_BOOTLOADER" ]]; then
				${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} The bootloader disk is different from the /boot/efi disk.
Bootloader : $_BOOTLOADER\n\
/boot/efi  : $dsk" 8 75
				return 1
			fi
			((++bootfound))
			_PART_BOOT="$i"
		elif [ "$fstype" = "swap" ]; then
			((++swapfound))
			_PART_SWAP="$i"
		fi
	done

	LFS=$false
	LPARTITION=$false
	if [ "$rootfound" -eq 0 ]; then
		${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} the mount point for the root filesystem (/) has not yet been configured." 8 75
		return 1
	elif [ $LEFI == "true" -a "$bootfound" -eq 0 ]; then
		info "=== UEFI ===" "\n\
${BOLD}${RED}ERROR:${RESET}\
The EFI system partition has not yet been configured.\n
Create it or define:\n
	- disk table : gpt\n
	- fstype     : FAT32\n
	- size       : minimum 100MB\n
	- mountpoint : /boot/efi\n"
		return 1
	elif [ "$rootfound" -gt 1 ]; then
		${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} the mount point for the root (/) file system was set on more than 1 partition." 8 75
		return 1
	elif [ "$bootfound" -gt 1 ]; then
		${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} the mount point for the boot file system (/boot/efi) has been configured on more than 1 partition." 8 75
		return 1
	elif [ "$homefound" -gt 1 ]; then
		${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} mount point for home (/home) has been configured on more than 1 partition." 8 75
		return 1
	elif [ "$varfound" -gt 1 ]; then
		${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} mount point for var (/var) has been configured on more than 1 partition." 8 75
		return 1
	fi
	LFS=$true
	LPARTITION=$true
	return 0
}

sh_getyes() {
	local var="$1"
	[[ "$var" -eq 0 ]] && { echo "${cmsg_nolabel[LC_DEFAULT]}"; } || { echo "${cmsg_yeslabel[LC_DEFAULT]}"; }
}

sh_choosePartition() {
	sh_umount_fs
	while true; do
		sh_disk_part_info
		local array=()
		local i
		local nlen=0
		local n=0
		local nc=0
		local result
		local exit_status
		local sep="\xe2\x94\x82"
		local oldfstype=
		local newfstype=
		local fsformat=
		local mntpoint=
		local oldmntpoint=
		local part=
		local -A Aoldfstype=()
		local dsk

		for i in "${ARRAY_PART_DEVICES[@]}"; do
			array[n++]="$i"
			if ((nlen < ${#i})); then
				nlen=${#i}
			fi
			array[n++]=$(
				printf "$sep%-11s$sep%6s$sep%-15s$sep%-20s$sep%-20s$sep%-9s$sep%-6s" \
					"${ARRAY_PART_FSTYPE[$nc]}" \
					"${ARRAY_PART_SIZE[$nc]}" \
					"${ARRAY_PART_LABEL[$nc]}" \
					"${ARRAY_PART_PARTTYPENAME[$nc]}" \
					"$(sh_splitarray "${Amntpoint[$i]}" 1)" \
					"$(sh_splitarray "${Amntpoint[$i]}" 2)" \
					"$(sh_getyes "$(sh_splitarray "${Amntpoint[$i]}" 3)")"
			)
			Aoldfstype+=([$i]="${ARRAY_PART_FSTYPE[$nc]}")
			((nc++))
		done
		((nlen += 6))
		part=$(${DIALOG} \
			--default-item "$_DEVICE" \
			--backtitle    "$ccabec" \
			--title        "${cmsg_TitleFileSystem[LC_DEFAULT]}" \
			--ok-label     "${cmsg_Mudar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_ButtonFeito[$LC_DEFAULT]}" \
			--colors \
			--extra-button \
			--extra-label  "${cmsg_info_particao[$LC_DEFAULT]}" \
			--menu "${cmsg_MENU[$LC_DEFAULT]}\n\n\
$(printf "%${nlen}s$sep%-11s$sep%6s$sep%-15s$sep%-20s$sep%-20s$sep%-8s$sep%s" "PARTITION" "FSTYPE" "SIZE" "LABEL" "TYPENAME" "MOUNTPOINT" "NEWFSTYPE" "FORMAT?")" \
			0 0 25 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		#    	dsk="${part%%?(p)+([0-9])}"
		dsk="${part%%[p0-9]*([0-9])}"

		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			LFS=$true
			LPARTITION=$true
			return 0
			;;
		3)
			result=$(fdisk -x "$dsk")
			display_result "$result" "${cmsg_part_disk[$LC_DEFAULT]^^}"
			continue
			;;
		esac

		oldfstype="${Aoldfstype[$part]}"
		oldmntpoint="$(sh_splitarray "${Amntpoint[$part]}" 1)"

		if sh_choosefstype "$oldfstype"; then
			newfstype=$_FILESYSTEM
		else
			continue
		fi

		if [[ "$newfstype" != "swap" ]]; then
			if [[ -z "$newfstype" ]]; then
				unset 'Amntpoint["$part"]'
				continue
			fi
			if [[ "$(sh_getBootEFI)" && "$newfstype" = "vfat" && -z "$oldmntpoint" ]]; then
				oldmntpoint='/boot/efi'
			fi
			if [[ "$newfstype" != "vfat" && -z "$oldmntpoint" ]]; then
				oldmntpoint='/'
			fi
			mntpoint=$(${DIALOG} \
				--colors \
				--title "$xtitle" \
				--backtitle "$ccabec" \
				--inputbox "Please specify the mount point for $part:" 8 75 "$oldmntpoint" 2>&1 >/dev/tty)
			exit_status=$?
			if [[ $exit_status -eq 1 ]]; then
				continue
			elif [[ "$mntpoint" = "/usr" ]]; then
				${DIALOG} \
					--colors \
					--msgbox "${BOLD}${RED}ERROR:${RESET} /usr mount point has been configured but is not supported, please remove it to continue." \
					8 75
				continue
			elif [[ "$mntpoint" = "/" ]]; then
				AConfDisk[_FILESYSTEM]="$newfstype"
			elif [[ -z "$mntpoint" ]]; then
				unset 'Amntpoint["$part"]'
				continue
			fi
		else
			mntpoint="none"
		fi

		${DIALOG} \
			--colors \
			--title "$xtitle" \
			--backtitle "$ccabec" \
			--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
			--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
			--yesno "Filesystem original : ${BLUE}$oldfstype${RESET}\n
New filesystem      : ${RED}$newfstype${RESET}\n\n
$(gettext "Você deseja criar um novo sistema de arquivos em") $part?" 8 75
		exit_status=$?
		if [ $exit_status -eq 0 ]; then
			fsformat=1
		elif [ $exit_status -eq 1 ]; then
			if [[ "$newfstype" = "swap" ]]; then
				unset 'Amntpoint["$part"]'
				continue
			fi
			fsformat=0
		else
			continue
		fi

		Amntpoint+=(["$part"]="$mntpoint|$newfstype|$fsformat")
		case $newfstype in
		"swap") Amkfs+=(["swap"]="mkswap") ;;
		*)
			Amkfs+=(["$newfstype"]="mkfs.$newfstype")
			LFS=$true
			LPARTITION=$true
			;;
		esac
		continue
	done
}

sh_chooseperfumery() {
	local -A Aperfumery
	local -A Aflag
	local -a array=()
	local exit_status
	local x

	Aperfumery[bash]=$(gettext "Ativar o bash para o usuario root")
	Aperfumery[bashrc]=$(gettext "Instalar bashrc.sh personalizado")
	Aperfumery[console]=$(gettext "Usar um terminal gráfico para o Carregador de Inicialização (GRUB)")
	Aperfumery[sshd]=$(gettext "Configurar servidor ssh")
	Aperfumery[sudo]=$(gettext "Enable sudo for login user")

	for x in "${!Aperfumery[@]}"; do
		Aflag[$x]='off'
		array+=("$x" "${Aperfumery[$x]}" "${Aflag[$x]}")
	done

	perf=$(${DIALOG} --title "$(gettext "=== PERFUMARIA ===")" \
		--default-item "$_WINDOWMANAGER" \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--checklist "${cmsg_MENU[$LC_DEFAULT]}" \
		12 70 0 "${array[@]}" 2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return
		;;
	esac
	_PERFUMERY=($(strtoarray "$perf"))
	LPERFUMERY=$true
}

sh_toBytes() {
	local ent mut num fra sai

	ent=${1^^}
	[[ ${ent} = "" ]] && ent=0B
	mut=${ent//[^BKMGT]/}
	num=${ent//[^[:digit:]]/}
	ent=${ent//$mut/}
	fra=${ent//[^,.]/}
	fra=${fra:+${ent//*[,.]/}}
	ent=0BKMGT
	ent=${ent//$mut*/}
	#mut=$((${#ent}-1))
	((mut = ${#ent} - 1, sai = num * 1024 ** mut))
	((ent = ${#sai} - ${#fra}))
	echo ${sai:0:$ent}
}

sh_ternario() {
	local retval="$1"
	[[ "$retval" -eq 0 ]] && {
		echo 1
		return 1
	} || {
		echo 0
		return 0
	}
}

sh_menu_language() {
	while true; do
		i18=$(${DIALOG} \
			--stdout --keep-tite --aspect 20 --clear \
			--default-item "$LC_DEFAULT" \
			--backtitle "$ccabec" \
			--clear \
			--title "${welcome[$LC_DEFAULT]}" \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_Exit[$LC_DEFAULT]}" \
			--menu "\n${escolhaIdioma[$LC_DEFAULT]}:" \
			0 80 0 \
			0 "$(gettext "Português")" \
			1 "$(gettext "Inglês")" \
			2 "$(gettext "Alemão")" \
			3 "$(gettext "Francês")" \
			4 "$(gettext "Espanhol")" \
			5 "$(gettext "Italiano")" )

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			exit 0
			;;
		esac
		LC_DEFAULT="$i18"
		LOCALE="${Alocale[$i18]}"
		#		sh_init "$@"
		break
	done
}

sh_voidServices() {
	if [[ -n $(command -v void-services) || -n $(command -v ./void-services) ]]; then
		void-services "$LC_DEFAULT" "-g"
		return 0
	fi
	msg "INFO" "$(log_info_msg "$(gettext "Aguarde...") ${cmsg_Gerando[$LC_DEFAULT]} test with void-mirror ${xurl}")"
	evaluate_retval "1" "$err_not_fatal"
	info "=== ${cmsg_Servicosr[$LC_DEFAULT]^^} === void-services" \
		"\n${RED}void-services $(gettext "não foi localizado no") \$PATH${RESET}" \
		"${RED}void-services $(gettext "não foi localizado em") $PWD!${RESET}"
	return 1
}

sh_getparamfile() {
	if ((LFILE)); then
		echo "- ${BOLD}${WHITE}[$app_conf]"
		return 0
	fi
	return 1
}

sh_main_menu() {
	sh_disk_part_info
	while true; do
		sh_touchConf
		if [ -z "$DEFITEM" ]; then
			DEFITEM="${cmsg_Mirror[$LC_DEFAULT]}"
		fi

		menu=$(${DIALOG} \
			--backtitle "$ccabec" \
			--clear \
			--colors \
			--default-item "$DEFITEM" \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_Sair[$LC_DEFAULT]}" \
			--extra-button --extra-label "${cmsg_Definicoes[$LC_DEFAULT]}" \
			--title "$APP - ${cmsg_MenuInstalacao[$LC_DEFAULT]} $(sh_getparamfile)" \
			--menu "${RESET}${cmsg_MENU[$LC_DEFAULT]}" 9 100 0 \
			"${cmsg_Mirror[$LC_DEFAULT]}" "${cmsg_descMirror[LC_DEFAULT]}" \
			"${cmsg_Source[$LC_DEFAULT]}" "${cmsg_DefinirInstalacaoDeOrigem[LC_DEFAULT]}" \
			"${cmsg_Disco[$LC_DEFAULT]}" "${cmsg_descDisco[LC_DEFAULT]}" \
			"${cmsg_BootLoader[$LC_DEFAULT]}" "${cmsg_descBootLoader[LC_DEFAULT]}" \
			"FileSystem" "${cmsg_descFileSystem[LC_DEFAULT]}" \
			"${cmsg_Teclado[$LC_DEFAULT]}" "${cmsg_descTeclado[LC_DEFAULT]}" \
			"Timezone" "${cmsg_descTimezone[LC_DEFAULT]}" \
			"Wm" "${cmsg_descWm[LC_DEFAULT]}" \
			"Extra" "${cmsg_descExtra[LC_DEFAULT]}" \
			"Audio" "${cmsg_DefinirAudioServer[LC_DEFAULT]}" \
			"${cmsg_Instalar[$LC_DEFAULT]}" "${cmsg_descInstalar[$LC_DEFAULT]}" \
			"Fde" "Full-Disk Encryption + Lvm (optional)" \
			"Lvm" "Logical Volume Management (optional)" \
			"Vg" "Delete/Clear Volume Group (VG) from LVM (optional)" \
			"Wifi" "${cmsg_descWifi[LC_DEFAULT]}" \
			"${cmsg_Servicos[$LC_DEFAULT]}" "${cmsg_utilvoidservices[LC_DEFAULT]}" \
			"${cmsg_Sair[$LC_DEFAULT]}" "${cmsg_descSair[LC_DEFAULT]}" 2>&1 >/dev/tty)

		if [ $? -eq 3 ]; then
			display_config
			info "${cmsg_ConfSalva[LC_DEFAULT]^^}" "$SETUP"
			continue
		fi

		case "$menu" in
		"${cmsg_Mirror[$LC_DEFAULT]}") sh_chooseMirror "$@" && [ -n "$LMIRROR" ] && DEFITEM="${cmsg_Source[$LC_DEFAULT]}" ;;
		"${cmsg_Source[$LC_DEFAULT]}") sh_chooseSource && [ -n "$LSOURCE" ] && DEFITEM="${cmsg_Disco[$LC_DEFAULT]}" ;;
		"${cmsg_Disco[$LC_DEFAULT]}") sh_chooseDisk && [ -n "$LDISK" ] && DEFITEM="${cmsg_BootLoader[$LC_DEFAULT]}" ;;
		"${cmsg_BootLoader[$LC_DEFAULT]}") sh_setBootLoader && [ -n "$LGRUB" ] && DEFITEM="FileSystem" ;;
		"FileSystem") sh_choosePartition && [ -n "$LPARTITION" ] && DEFITEM="${cmsg_Teclado[$LC_DEFAULT]}" ;;
		"${cmsg_Teclado[$LC_DEFAULT]}") sh_chooseKeymap && [ -n "$LKEYMAP" ] && DEFITEM="Timezone" ;;
		"Timezone") sh_chooseTimezone && [ -n "$LTIMEZONE" ] && DEFITEM="Wm" ;;
		"Wm") sh_choosewm && [ -n "$LWM" ] && DEFITEM="Extra" ;;
		"Extra") sh_confadduser       "$@" && [ -n "$LEXTRA" ] && DEFITEM="Audio" ;;
		"Audio") sh_chooseaudioserver "$@" && [ -n "$LAUDIO" ] && DEFITEM="${cmsg_Instalar[$LC_DEFAULT]}" ;;
		"${cmsg_Instalar[$LC_DEFAULT]}") sh_install ;;
		"Fde") sh_confLvm && [ -n "$LFDE" ] && DEFITEM="${cmsg_Instalar[$LC_DEFAULT]}" ;;
		"Lvm") sh_confLvm && [ -n "$LVM" ] && DEFITEM="${cmsg_Instalar[$LC_DEFAULT]}" ;;
		"Vg") sh_chooseVg ;;
		"Wifi") sh_confWifi "$@" && [ -n "$LWIFI" ] && DEFITEM="${cmsg_Instalar[$LC_DEFAULT]}" ;;
		"${cmsg_Servicos[$LC_DEFAULT]}") sh_voidServices ;;
		"${cmsg_Sair[$LC_DEFAULT]}") die "${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..." ;;
		*)  errorbeep
			${DIALOG} --clear \
			--title "$ccabecmin" \
			--colors \
			--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
			--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
			--yesno "\n${BOLD}${WHITE}${cmsg_SairSemInstalar[$LC_DEFAULT]}?" \
			8 70 && die ;;
		esac
	done
}

sh_version() {
	cat <<-EOF
		${bold}${cyan}${0##*/} v${_VERSION_}${reset}
		${bold}${black}Copyright (C) 2023 vcatafesta@gmail.com
		$(gettext 'Licença GPL v3+: GNU GPL versão 3 ou posterior') <https://gnu.org/licenses/gpl.html>
		$(gettext 'Este é um software livre: você é livre para alterá-lo e redistribuí-lo.')
		$(gettext 'NÃO HÁ QUALQUER GARANTIA, na máxima extensão permitida em lei.')${reset}
	EOF
}

sh_init() {
	while test $# -gt 0; do
		case $1 in
		-h | -H | --help)
			sh_usage
			exit $(($# ? 0 : 1))
			;;
		-V | --version)
			sh_version
			exit $(($# ? 0 : 1))
			;;
		-f | --file)
			LFILE=$true
			if [[ -n "$2" && "${2:0:1}" != '-' ]]; then
				app_conf="$2"
				shift
			fi
			sh_checkRoot
			sh_loadconf
			;;
		-n | --nocolor)
			log_msg "$(gettext "Desligando saída de cores")"
			sh_unsetVarColors
			;;
		-q | --quiet)
			log_msg "$(gettext "Ativando resumo na saída")"
			quiet=$true
			;;
		-g | --grafico)
			log_msg "$(gettext "Ligando modo gráfico")"
			grafico=$true
			;;
		-i | -I | --install)
			sh_checkRoot
			LINSTALL=$true
			appexec+=('sh_main_menu')
			;;
		-c | -C | --chroot)
			sh_checkRoot
			LCHROOT=$true
			appexec+=('sh_dryrun')
			;;
		*) die "${cmsg_operNotSupported[LC_DEFAULT]}: $1 ($(gettext "usar -h para ajuda"))" ;;
		esac
		shift
	done
}

sh_getfullusernameloggeduser() {
	local passwd_fields
	IFS=: read -r -a passwd_fields <<<"$(grep -w "$USER" /etc/passwd)"
	echo "${passwd_fields[4]}"
}

function sh_getfullusernameloggeduserbyGetent() {
  local logged_user="${SUDO_USER:-$USER}"  # Prioriza SUDO_USER, mas usa USER como fallback
  getent passwd "$logged_user" | cut -d ':' -f 5 | cut -d ',' -f 1
}

sh_getfullusernameloggeduserbyid() {
	local passwd_fields
	IFS=: read -r -a passwd_fields <<<"$(grep -w 1000 /etc/passwd)"
	echo "${passwd_fields[4]%%[,]*}"
}

sh_getusernameloggeduserbyid() {
	local passwd_fields
	IFS=: read -r -a passwd_fields <<<"$(grep -w 1000 /etc/passwd)"
	echo "${passwd_fields[0]}"
}

sh_getdevicefrompartition() {
	local _part="$1"
	echo "${_part%%[p0-9]*([0-9])}"
}

sh_confLvm() {
	local size
	local FdeText
	local arr
	local disk
	local _part
	local dsk
	local oldfstype
	local flag
	local mntpoint
	local fstype
	local i
	local rootfound=0
	local ctitlemenu
	local VGs
	local PVs

	if [[ "$menu" = "Fde" ]]; then
		ctitlemenu='FDE CONFIG'
		LCONFIGFDE=$true
	else
		ctitlemenu='LVM CONFIG'
		LCONFIGFDE=$false
	fi

	if ! ((LDISK)); then
		alerta "${RED}${REVERSE}$ctitlemenu ${cmsg_TitleDisco[LC_DEFAULT]}" "${RED}${REVERSE}${cmsg_NotConfDisco[LC_DEFAULT]^^}"
		DEFITEM="${cmsg_Disco[$LC_DEFAULT]}"
		return 1
	elif ! ((LPARTITION)); then
		alerta "${RED}${REVERSE}$ctitlemenu $(gettext "=== PARTIÇÃO ===")" "${RED}${REVERSE}${cmsg_NotConfFileSystem[LC_DEFAULT]^^}"
		DEFITEM="FileSystem"
		return 1
	fi

	sh_disk_part_info
	mensagem "=== VGs ===" "\n\n${BOLD}${WHITE}$(gettext "Aguarde... coletando informações sobre VGs")"
	VGs="$(vgs --noheadings)"
	mensagem "=== PVs ===" "\n\n${BOLD}${WHITE}$(gettext "Aguarde... coletando informações sobre PVs")"
	PVs="$(pvs --noheadings)"
	disk="${_BOOTLOADER}|\
$(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" "$DSK_TRAN")|\
$(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" "$DSK_SIZE")|\
$(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" "$DSK_PTTYPE")|\
$(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" "$DSK_MODEL")|\
$(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" "$DSK_LABEL")|\
$(sh_splitarray "${AARRAY_DSK_DEVICES[$_BOOTLOADER]}" "$DSK_SERIAL")"

	for i in "${!Amntpoint[@]}"; do
		_part="$i"
		dsk="${_part%%[p0-9]*([0-9])}"
		size="$(sh_splitarray "${AARRAY_PART_DEVICES[$_part]}" 2)"
		oldfstype="$(sh_splitarray "${AARRAY_PART_DEVICES[$_part]}" 7)"
		flag="$(sh_splitarray "${AARRAY_PART_DEVICES[$_part]}" 8)"
		mntpoint="$(sh_splitarray "${Amntpoint[$_part]}" 1)"
		fstype="$(sh_splitarray "${Amntpoint[$_part]}" 2)"

		if [ "$mntpoint" = "/" ]; then
			AConfFde[partition]="$_part"
			((++rootfound))
			break
		fi
	done

	if [ "$rootfound" -eq 0 ]; then
		${DIALOG} --colors --msgbox "${BOLD}${RED}ERROR:${RESET} $(gettext "o ponto de montagem para o sistema de arquivos raiz") (/) $(gettext "ainda não foi configurado.")" 8 75
		return 1
	fi

	while true; do
		exec 3>&1
		FdeText=$(${DIALOG} \
			--title "=== $ctitlemenu ===" \
			--colors \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
			--backtitle "$ccabec" \
			--insecure "$@" \
			--mixedform "${cmsg_MENU[$LC_DEFAULT]}\n\n$(gettext "O tamanho das partições é uma questão de preferência pessoal.")" \
			0 0 0 \
			"Disk: " 1 1 "$disk" 1 42 40 0 2 \
			"Partition: " 2 1 "$_part" 2 42 40 0 2 \
			"Size: " 3 1 "$size" 3 42 40 0 2 \
			"Old FS: " 4 1 "$oldfstype" 4 42 40 0 2 \
			"New FS: " 5 1 "$fstype" 5 42 40 0 2 \
			"Flag: " 6 1 "$flag" 6 42 40 0 2 \
			"Volume Group: " 7 1 "${AConfFde[vg]}" 7 42 25 0 0 \
			"Passphrase: " 8 1 "${AConfFde[passphrase]}" 8 42 20 0 1 \
			"Verify Passphrase: " 9 1 "${AConfFde[verifypassphrase]}" 9 42 20 0 1 \
			"Logical volume (/): " 10 1 "${AConfFde[lvroot]}" 10 42 15 0 0 \
			"Logical volume (/swap) (empty to none): " 11 1 "${AConfFde[lvswap]}" 11 42 15 0 0 \
			"Logical volume (/var)  (empty to none): " 12 1 "${AConfFde[lvvar]}" 12 42 15 0 0 \
			"Logical volume (/home) (empty to none): " 13 1 "${AConfFde[lvhome]}" 13 42 15 0 0 \
			2>&1 1>&3)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			LFDE=$false
			LVM=$false
			return 1
			;;
		"$D_OK")
			mapfile -t arr <<<"$FdeText"
			AConfFde[vg]="${arr[6]}"
			AConfFde[passphrase]="${arr[7]}"
			AConfFde[verifypassphrase]="${arr[8]}"
			AConfFde[lvroot]="${arr[9]}"
			AConfFde[lvswap]="${arr[10]}"
			AConfFde[lvvar]="${arr[11]}"
			AConfFde[lvhome]="${arr[12]}"
			AConfFde[partition]="$_part"

			lvunitroot="${AConfFde[lvroot]: -1}"
			lvsizeroot="${AConfFde[lvroot]%$lvunitroot}"
			lvunitswap="${AConfFde[lvswap]: -1}"
			lvsizeswap="${AConfFde[lvswap]%$lvunitswap}"
			lvunitvar="${AConfFde[lvvar]: -1}"
			lvsizevar="${AConfFde[lvvar]%$lvunitvar}"
			lvunithome="${AConfFde[lvhome]: -1}"
			lvsizehome="${AConfFde[lvhome]%$lvunithome}"
			maxbytespartition="$(sh_toBytes "$size")"
			byteslvroot="$(sh_toBytes "${AConfFde[lvroot]}")"
			byteslvswap="$(sh_toBytes "${AConfFde[lvswap]}")"
			byteslvvar="$(sh_toBytes "${AConfFde[lvvar]}")"
			byteslvhome="$(sh_toBytes "${AConfFde[lvhome]}")"

			if grep -o -q "$_part " <<<"$PVs"; then
				if ! conf "=== FDE/LVM - $(gettext "Partição") === " \
					"\n$(gettext "Partição") : '$_part'\n$(gettext "Aparentemente,") $(gettext "a partição escolhida já está atribuída como PV no sistema.")\n\n${BOLD}${WHITE}$(gettext "Continuar de qualquer maneira?")\n\n"; then
					LFDE=$false
					LVM=$false
					continue
				fi
			fi

			if grep -o -q "${AConfFde[vg]} " <<<"$VGs"; then
				if ! conf "=== FDE/LVM - $(gettext "Grupo de Volume") === " \
					"\n$(gettext "Group de Volume") : '${AConfFde[vg]}'\n$(gettext "Aparentemente,") $(gettext "o VG existe no sistema.")\n\n${BOLD}${WHITE}$(gettext "Continuar mesmo assim?")\n\n"; then
					LFDE=$false
					LVM=$false
					continue
				fi
			fi

			if [[ -z "${AConfFde[vg]}" ]]; then
				if ! conf "=== FDE/LVM - $(gettext "Grupo de Volume") === " \
					"\nVolume Group = '${AConfFde[vg]}'\n$(gettext "O nome do grupo de volumes não pode estar vazio.")\n\n${BOLD}${WHITE}$(gettext "Novamente?")\n\n"; then
					LFDE=$false
					LVM=$false
					return 1
				fi
				continue
			fi

			if [[ $maxbytespartition -lt $((byteslvroot + byteslvswap + byteslvhome + byteslvvar)) ]]; then
				if ! conf "=== FDE/LVM - $(gettext "Volumes lógicos") === " \
					"\n$(gettext "A soma das partições excede o tamanho total do disco.")\n\n${BOLD}${WHITE}$(gettext "Novamente?")\n\n"; then
					LFDE=$false
					LVM=$false
					return 1
				fi
				continue
			fi

			if [[ -z "$lvunitroot" || "$lvunitroot" != @(K|M|G|T|%) ]]; then
				if ! conf "=== FDE/LM - $(gettext "Volume lógico raiz") === " \
					"\nThe logical volume root cannot be empty or minuscule in size and/or units out of scope (K|M|G|T|%)\nex: 25% [1-100]% or 10G [1-n](K|M|G|T).\n\n${BOLD}${WHITE}$(gettext "Novamente?")\n\n"; then
					LFDE=$false
					LVM=$false
					return 1
				fi
				continue
			fi

			if [[ -n "$lvunitswap" && "$lvunitswap" != @(K|M|G|T|%) ]]; then
				if ! conf "=== FDE/LVM - $("Volume lógico") swap === " \
					"\nThe logical volume swap cannot be empty or minuscule in size and/or units out of scope (K|M|G|T|%)\nex: 25% [1-100]% or 10G [1-n](K|M|G|T).\n\n${BOLD}${WHITE}$(gettext "Novamente?")\n\n"; then
					LFDE=$false
					LVM=$false
					return 1
				fi
				continue
			fi

			if [[ -n "$lvunithome" && "$lvunithome" != @(K|M|G|T|%) ]]; then
				if ! conf "=== FDE/LVM - $("Volume lógico") swap === " \
					"\nThe logical volume swap cannot be empty or minuscule in size and/or units out of scope (K|M|G|T|%)\nex: 25% [1-100]% or 10G [1-n](K|M|G|T).\n\n${BOLD}${WHITE}$(gettext "Novamente?")\n\n"; then
					LFDE=$false
					LVM=$false
					return 1
				fi
				continue
			fi

			if [[ -n "$lvunitvar" && "$lvunitvar" != @(K|M|G|T|%) ]]; then
				if ! conf "=== FDE/LVM - $("Volume lógico") var === " \
					"\nThe logical volume var cannot be empty or minuscule in size and/or units out of scope (K|M|G|T|%)\nex: 25% [1-100]% or 10G [1-n](K|M|G|T).\n\n${BOLD}${WHITE}$(gettext "Novamente?")\n\n"; then
					LFDE=$false
					LVM=$false
					return 1
				fi
				continue
			fi

			if [[ -z "${AConfFde[passphrase]}" || "${AConfFde[passphrase]}" != "${AConfFde[verifypassphrase]}" ]]; then
				if ! conf "=== FDE/LVM - $(gettext "Senha") === " \
					"\nPassphrases do not match and also not be empty.\n\n${BOLD}${WHITE}$(gettext "Novamente?")\n\n"; then
					LFDE=$false
					LVM=$false
					return 1
				fi
				continue
			fi

			AmntpointFDE=()
			AmntpointFDE+=(["/dev/${AConfFde[vg]}/root"]="root|$fstype|1|${AConfFde[lvroot]}|/")
			#					[[ -n "${AConfFde[lvswap]}" && "$(sh_toBytes "${AConfFde[lvswap]}")" -gt 0 ]] &&	AmntpointFDE+=(["/dev/${AConfFde[vg]}/swap"]="swap|swap|1|${AConfFde[lvswap]}|swap")
			#					[[ -n "${AConfFde[lvvar]}"  && "$(sh_toBytes "${AConfFde[lvvar]}")"  -gt 0 ]]	&&	AmntpointFDE+=(["/dev/${AConfFde[vg]}/var"]="var|$fstype|1|${AConfFde[lvvar]}|/var")
			#					[[ -n "${AConfFde[lvhome]}" && "$(sh_toBytes "${AConfFde[lvhome]}")" -gt 0 ]]	&&	AmntpointFDE+=(["/dev/${AConfFde[vg]}/home"]="home|$fstype|1|${AConfFde[lvhome]}|/home")
			[[ -n "${AConfFde[lvswap]}" ]] && AmntpointFDE+=(["/dev/${AConfFde[vg]}/swap"]="swap|swap|1|${AConfFde[lvswap]}|swap")
			[[ -n "${AConfFde[lvvar]}" ]] && AmntpointFDE+=(["/dev/${AConfFde[vg]}/var"]="var|$fstype|1|${AConfFde[lvvar]}|/var")
			[[ -n "${AConfFde[lvhome]}" ]] && AmntpointFDE+=(["/dev/${AConfFde[vg]}/home"]="home|$fstype|1|${AConfFde[lvhome]}|/home")
			;;
		esac
		exec 3>&-
		if ((LCONFIGFDE)); then
			LFDE=$true
			LVM=$true
		else
			LFDE=$false
			LVM=$true
		fi
		return 0
	done
}

sh_make_fsFde() {
	local i
	local format
	local fstype
	local _part
	local label

	last_msg="Formatando e cryptografando a unidade : ${AConfFde[partition]}"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	printf "${AConfFde[passphrase]}" | cryptsetup luksFormat --type luks1 "${AConfFde[partition]}" --key-file=- -v 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	evaluate_retval "${PIPESTATUS[1]}"

	last_msg="Abrindo a unidade cryptografada: ${AConfFde[partition]}"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	printf "${AConfFde[passphrase]}" | cryptsetup luksOpen "${AConfFde[partition]}" "${AConfFde[vg]}" --key-file=- -v 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	evaluate_retval "${PIPESTATUS[1]}"
}

sh_make_fsLvm() {
	local i
	local _part
	local label
	local fstype
	local format
	local size
	local mntpoint
	local lvunit
	local aLVs=()

	if ((LFDE)); then
		sh_make_fsFde
	fi

	if ((LFDE)); then
		:
	else
		last_msg="Criando a unidade fisica LVM: ${AConfFde[vg]}"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
		pvcreate -ff "${AConfFde[partition]}" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
		evaluate_retval "${PIPESTATUS[0]}"
	fi

	last_msg="Criando o grupo de volumes LVM: ${AConfFde[vg]}"
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"

	if ((LFDE)); then
		vgcreate -ff "${AConfFde[vg]}" "/dev/mapper/${AConfFde[vg]}" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	else
		vgcreate -ff "${AConfFde[vg]}" "${AConfFde[partition]}" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	fi
	evaluate_retval "${PIPESTATUS[0]}"

	#order required for creation due to issue of 100%
	aLVs=("/dev/${AConfFde[vg]}/root" "/dev/${AConfFde[vg]}/swap" "/dev/${AConfFde[vg]}/var" "/dev/${AConfFde[vg]}/home")
	#	for i in "${!AmntpointFDE[@]}"; do
	for i in "${aLVs[@]}"; do
		_part="$i"
		label="$(sh_splitarray "${AmntpointFDE[$i]}" 1)"
		fstype="$(sh_splitarray "${AmntpointFDE[$i]}" 2)"
		format="$(sh_splitarray "${AmntpointFDE[$i]}" 3)"
		size="$(sh_splitarray "${AmntpointFDE[$i]}" 4)"
		mntpoint="$(sh_splitarray "${AmntpointFDE[$i]}" 5)"
		lvunit="${size: -1}"

		[[ -z "$size" ]] && continue

		last_msg="Criando o volume lógico: $label"
		msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
		if [[ "$lvunit" = "%" ]]; then
			lvcreate --yes --name "$label" -l "${size}FREE" "${AConfFde[vg]}" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
		else
			lvcreate --yes --name "$label" -L "${size}" "${AConfFde[vg]}" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
		fi
		evaluate_retval "${PIPESTATUS[0]}"

		if [[ "$format" = "1" ]]; then
			last_msg="${cmsg_FormatandoParticao[$LC_DEFAULT]} ${_part} FS ${fstype,,}"
			msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
			declare -A fsparms=(
				[ext2]="-F   -L $label"
				[ext3]="-F   -L $label"
				[ext4]="-F   -L $label"
				[btrfs]="-f   -L $label"
				[f2fs]="-f   -l $label"
				[xfs]="-f   -L $label"
				[jfs]="-f   -L $label"
				[vfat]="-F32 -n EFI"
				[reiserfs]="-f   -l $label"
			)
			if [[ "$fstype" = "swap" ]]; then
				mkswap "$_part" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
			else
				mkfs.$fstype ${fsparms[$fstype]} $_part 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
			fi
			evaluate_retval "${PIPESTATUS[0]}"
		fi
	done
	_arch=$(xbps-uhelper arch)
	export XBPS_ARCH=${_arch}
	return 0
}

sh_clearVg() {
	local _vg="$1"
	local alogical=()
	local alogical=("/dev/$_vg/root" "/dev/$_vg/swap" "/dev/$_vg/home" "/dev/$_vg/var")
	local afs=("/dev/mapper/$_vg-root" "/dev/mapper/$_vg-swap" "/dev/mapper/$_vg-home" "/dev/mapper/$_vg-var")
	local i

	sh_umount_fs
	last_msg=$(gettext "Removendo LVs (Volumes Lógicos)")
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	lvremove -ff /dev/"$_vg"/* 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"

	last_msg=$(gettext "Removendo VG (Volume Group)")
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	vgremove -ff "$_vg" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"

	last_msg=$(gettext "Removendo PVs (Volumes Fisícos)")
	msg "INFO" "$last_msg" "$(log_info_msg "$last_msg")"
	pvremove -ff "${AConfFde[partition]}" 2>&1 | tee -i -a "$BOOTLOG" >"$LOGGER"
	evaluate_retval "${PIPESTATUS[0]}" "$err_not_fatal"
}

sh_chooseVg() {
	local -A Avg
	local -A Aflag
	local array=()
	local defaultitem
	local fields
	local sorted_list
	local exit_status
	local sep="\xe2\x94\x82"

	sh_vg_info
	sorted_list=$(for key in "${!AARRAY_VG_DEVICES[@]}"; do echo "$key|${AARRAY_VG_DEVICES[$key]}"; done | sort -t\| -k2 -k1)

	if [[ ${#sorted_list} -eq 0 ]]; then
		alerta "=== VG ===" "${BOLD}${BLACK}${REVERSE}$(gettext "Info: Nenhum VG localizado no sistema.")"
		return 1
	fi

	defaultitem="${AConfFde[vg]}"
	while IFS='|' LC_ALL=C read -r -a fields; do
		x="${fields[0]}"
		Aflag[$x]='off'
		Aflag[$defaultitem]='on'
		array+=("$x" "$(printf "$sep%-15s$sep%10s$sep%10s$sep%-s" \
			"${fields[1]}" \
			"${fields[2]}" \
			"${fields[3]}" \
			"${fields[4]}")"
			"${Aflag[$x]}")
	done <<<"${sorted_list[@]}"

	vg=$(${DIALOG} --title "=== VG ===" \
		--colors \
		--cancel-label "${cmsg_ButtonBack[$LC_DEFAULT]}" \
		--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
		--radiolist "${cmsg_MENU[$LC_DEFAULT]}" \
		25 70 24 "${array[@]}" 2>&1 >/dev/tty)

	exit_status=$?
	case $exit_status in
	"$D_ESC" | "$D_CANCEL")
		return
		;;
	esac
	if ! infoconf "=== VG === " "$(lvs --noheadings "$vg")" \
		" === VG ===" "${BOLD}${RED}WARNING:${RESET} $(gettext "É importante lembrar que remover um VG")\
$(gettext "é uma operação irreversível e pode resultar em perda de dados.")\n
$(gettext "Certifique-se de fazer backup de seus dados.")\n
$(gettext "Todos os dados do disco serão apagados!")\n\n\
${BOLD}${WHITE}$(gettext "Deseja continuar?")"; then
		return 1
	fi
	sh_clearVg "$vg"
}

sh_setLanguage() {
	#	langmsg=('lang=("pt_BR"	"en_US" "de_DE" "fr_FR" "es_ES" "it_IT")')
	#	for xmsg in "${langmsg[@]}"; do eval "$xmsg"; done
	#	#echo "lang       ${#lang[@]} ${lang[@]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	#	#echo "cmsg_ERRO ${#cmsg_ERRO[@]} ${cmsg_ERRO[@]} ${cmsg_ERRO[$PT_BR]} ${cmsg_ERRO[$EN_US]}"

	#	cmsg_LABEL[pt_BR]=$(gettext "Usar as teclas ${RED}↑ PARA CIMA ${RESET}e ${RED}↓ PARA BAIXO ${RESET}para navegar.\nUsar ${RED}TAB ${RESET}para alternar entre os botões e ${RED}ENTER ${RESET}para selecionar.")
	#	cmsg_LBL_check[pt_BR]=$(gettext "Usar as teclas ${RED}PARA CIMA ${RESET}e ${RED}PARA BAIXO ${RESET}para navegar.\nUsar ${RED}BARRA DE ESPAÇO ${RESET}para selecionar.\nUsar ${RED}TAB ${RESET}para alternar entre os botões e ${RED}ENTER ${RESET}para aceitar.")
	#	cmsg_Tarball_Corrompido[pt_BR]=$(gettext "\n${RED}Aparentemente o tarball rootfs ${_TARBALL_ROOTFS} está corrompido.\n\n${BOLD}${WHITE}Testar a integridade e reiniciar a instalação ?")

	cmsg_LABEL1[pt_BR]=$(gettext "Usar as setas ↑ e ↓ para navegar.")
	cmsg_LABEL2[pt_BR]=$(gettext "Usar TAB para alternar entre os botões.")
	cmsg_LABEL3[pt_BR]=$(gettext "Usar ENTER ou BARRA DE ESPAÇO para selecionar e aceitar.")
	cmsg_MENU[pt_BR]="${cmsg_LABEL1[pt_BR]}\n${cmsg_LABEL2[pt_BR]}\n${cmsg_LABEL3[pt_BR]}"

	cmsg_Tarball_Corrompido0[pt_BR]=$(gettext "Aparentemente o tarball rootfs")
	cmsg_Tarball_Corrompido1[pt_BR]=$(gettext "está corrompido.")
	cmsg_Tarball_Corrompido2[pt_BR]=$(gettext "Testar a integridade e reiniciar a instalação ?")
	cmsg_Tarball_Corrompido[pt_BR]="\n${RED}${cmsg_Tarball_Corrompido0[pt_BR]} ${_TARBALL_ROOTFS} ${cmsg_Tarball_Corrompido1[pt_BR]}\n\n${BOLD}${WHITE}${cmsg_Tarball_Corrompido2[pt_BR]}"

	cmsg_TamanhoInsuficiente[pt_BR]=$(gettext "Tamanho disco insuficiente para criar partições com swap")
	cmsg_DesejaProsseguir[pt_BR]=$(gettext "Deseja prosseguir SEM partição de swap?")
	cmsg_DesejaCriarParticaoSwap[pt_BR]=$(gettext "Deseja criar partição de swap ?")
	cmsg_AcompanheInstalacao[pt_BR]=$(gettext "Acompanhe a evolução da instalação            ")
	cmsg_OuPeloTerminal[pt_BR]=$(gettext "e/ou pelo terminal tty8        ")
	cmsg_PacotesDaImagemIso[pt_BR]=$(gettext "Utilizar os pacotes da imagem ISO")
	cmsg_BaixadoDoRepositorioOficial[pt_BR]=$(gettext     "Utilizar tarball base e atualizar pela internet (qualquer host Linux)")
	cmsg_BaixadoDoRepositorioOficialFull[pt_BR]=$(gettext "Baixar todos os pacotes da internet (requer host Void Linux)")
	cmsg_DefinirInstalacaoDeOrigem[pt_BR]=$(gettext "Definir fonte da instalação")
	cmsg_Definicoes[pt_BR]=$(gettext "Definições")
	cmsg_naodefinido[pt_BR]=$(gettext "não definido")
	cmsg_AjustandoSenhaUsuario[pt_BR]=$(gettext "Ajustando senha usuário")
	cmsg_AtivandoBashUsuario[pt_BR]=$(gettext "Ativando o bash para o usuário")
	cmsg_CriandoUsuario[pt_BR]=$(gettext "Criando usuário")
	cmsg_MenuInstalacao[pt_BR]=$(gettext "MENU DE INSTALAÇÃO")
	cmsg_DesMontandoAmbiente[pt_BR]=$(gettext "Desmontando ambiente")
	cmsg_MontandoAmbiente[pt_BR]=$(gettext "Montando ambiente")
	cmsg_MontandoParticao[pt_BR]=$(gettext "Montando partição")
	cmsg_Gerando[pt_BR]=$(gettext "Gerando")
	cmsg_Ajustando[pt_BR]=$(gettext "Ajustando")
	cmsg_Copiando[pt_BR]=$(gettext "Copiando")
	cmsg_Descompactando[pt_BR]=$(gettext "Descompactando")
	cmsg_Atualizando[pt_BR]=$(gettext "Atualizando")
	cmsg_Instalando[pt_BR]=$(gettext "Instalando")
	cmsg_Configurando[pt_BR]=$(gettext "Configurando")
	cmsg_Em[pt_BR]="${cyan}=>${reset}"
	cmsg_ERRO[pt_BR]=$(gettext "ERRO")
	cmsg_Aceitar[pt_BR]=$(gettext "Aceitar")
	cmsg_Configurar[pt_BR]=$(gettext "Configurar")
	cmsg_Mudar[pt_BR]=$(gettext "Mudar")
	cmsg_Sair[pt_BR]=$(gettext "Sair")
	cmsg_Instalar[pt_BR]=$(gettext "Instalar")
	cmsg_Mirror[pt_BR]=$(gettext "Espelho")
	cmsg_BootLoader[pt_BR]=$(gettext "Carregador de Inicialização (GRUB)")
	cmsg_FileSystem[pt_BR]=$(gettext "Sistema de Arquivos")
	cmsg_Disco[pt_BR]=$(gettext "Disco")
	cmsg_Teclado[pt_BR]=$(gettext "Teclado")
	cmsg_SairSemInstalar[pt_BR]=$(gettext "Sair sem instalar")
	cmsg_tty[pt_BR]=$(gettext "Somente terminal, sem interface gráfica")
	cmsg_descDisco[pt_BR]=$(gettext "Definir disco e partições")
	cmsg_descFileSystem[pt_BR]=$(gettext "Definir sistema de arquivos e pontos de montagem")
	cmsg_descBootLoader[pt_BR]=$(gettext "Definir bootloader")
	cmsg_descTeclado[pt_BR]=$(gettext "Definir teclado do sistema")
	cmsg_descTimezone[pt_BR]=$(gettext "Definir fuso horário")
	cmsg_descWm[pt_BR]=$(gettext "Definir gerenciador de janelas")
	cmsg_descWifi[pt_BR]=$(gettext "Definir rede e senha wifi (opcional)")
	cmsg_opcional[pt_BR]=$(gettext "opcional")
	cmsg_descExtra[pt_BR]=$(gettext "Definir usuário,senha,hostname")
	cmsg_descMirror[pt_BR]=$(gettext "Escolher espelho")
	cmsg_descInstalar[pt_BR]=$(gettext "Iniciar instalação")
	cmsg_descSair[pt_BR]=$(gettext "Encerrar instalação")
	cmsg_InstalacaoAbortada[pt_BR]=$(gettext "Instalação abortada")
	cmsg_ChecandoRota[pt_BR]=$(gettext "Checando rota de internet para o servidor")
	cmsg_falhaAbertura[pt_BR]=$(gettext "ERRO: falha de abertura de")
	cmsg_operNotRoot[pt_BR]=$(gettext "erro: você não pode realizar esta operação a menos que seja root.")
	cmsg_operNotSupported[pt_BR]=$(gettext "erro: operação não suportada")
	cmsg_ButtonBack[pt_BR]=$(gettext "Voltar")
	cmsg_ButtonFeito[pt_BR]=$(gettext "Feito")
	cmsg_info_disco[pt_BR]=$(gettext "Info disco")
	cmsg_info_particao[pt_BR]=$(gettext "Info partição")
	cmsg_ok[pt_BR]=$(gettext "Ok")
	cmsg_Exit[pt_BR]=$(gettext "Sair")
	cmsg_Select[pt_BR]=$(gettext "Selecionar")
	cmsg_disco_origem[pt_BR]=$(gettext "DISCO DE ORIGEM")
	cmsg_Source[pt_BR]=$(gettext "Fonte")
	cmsg_disco_destino[pt_BR]=$(gettext "DISCO DE DESTINO")
	cmsg_dest[pt_BR]=$(gettext "Escolha o disco de DESTINO:")
	cmsg_yeslabel[pt_BR]=$(gettext "Sim")
	cmsg_nolabel[pt_BR]=$(gettext "Não")
	cmsg_todos_os_dados_serao_perdidos[pt_BR]=$(gettext "Todos os dados disco DESTINO serão perdidos!")
	cwarning[pt_BR]=$(gettext "=== AVISO ===")
	cmsg_DismountFileSystem[pt_BR]=$(gettext "Desmontando sistema de arquivos")
	cmsg_FinalizadaComSucesso[pt_BR]=$(gettext "Instalação finalizada com sucesso")
	cmsg_ErroTar[pt_BR]=$(gettext "Falha ao descompactar o tarball")
	cmsg_Para[pt_BR]=$(gettext "para")
	cmsg_ConfSalva[pt_BR]=$(gettext "Configurações salvas para instalação")
	cmsg_Operacao[pt_BR]=$(gettext "nenhuma operação especificada - usar -h para ajuda")
	cmsg_OneOperacao[pt_BR]=$(gettext "apenas uma operação pode ser usada por vez")
	cmsg_TestandoDisco[pt_BR]=$(gettext "Testando disco")
	cmsg_ContinuarParticionamento[pt_BR]=$(gettext "Continuar com o particionamento em")
	cmsg_FormatandoParticao[pt_BR]=$(gettext "Formatando partição")
	cmsg_AtivandoServico[pt_BR]=$(gettext "Ativando serviço")
	cmsg_IniciandoServico[pt_BR]=$(gettext "Iniciando serviço")
	cmsg_Permissoes[pt_BR]=$(gettext "permissões")
	cmsg_ChecandoTarball[pt_BR]=$(gettext "Checando existência do tarball")
	cmsg_VerificandoIntegridadeTarball[pt_BR]=$(gettext "Verificando a integridade do tarball")
	cmsg_IniciandoDownload[pt_BR]=$(gettext "Iniciando download de")
	cmsg_CriandoParticoes[pt_BR]=$(gettext "Criando partições em")
	cmsg_CriandoDiretorios[pt_BR]=$(gettext "Criando diretórios em")
	cmsg_AtualizandoRepositorio[pt_BR]=$(gettext "Atualizando repositório")
	cmsg_RemovendoPacotesAntigosObseletos[pt_BR]=$(gettext "Removendo pacotes antigos/absoletos")
	cmsg_InstalandoMetaPacotes[pt_BR]=$(gettext "Instalando meta pacote X")
	cmsg_AtualizandoPacotesBase[pt_BR]=$(gettext "Atualizando pacotes base")
	cmsg_AtualizandoPacotesAdicionais[pt_BR]=$(gettext "Atualizando pacotes adicionais em")
	cmsg_part_disk[pt_BR]=$(gettext "Visualizar partições do disco")
	cmsg_TitleDisco[pt_BR]=$(gettext "=== DISCO ===")
	cmsg_TitleFileSystem[pt_BR]=$(gettext "=== FILE SYSTEM ===")
	cmsg_ChecandoParticoesMontadas[pt_BR]=$(gettext "Checando por partições montadas no disco")
	cmsg_all_mounted_part[pt_BR]=$(gettext "O disco selecionado contém partições montadas")
	cmsgSetKeyboardLayout[pt_BR]=$(gettext "Escolher outro layout de teclado")
	cmsg_LayoutAtual[pt_BR]=$(gettext "Layout atual")
	cmsg_umount_partition[pt_BR]=$(gettext "Aguarde, Desmontando particao de trabalho")
	cmsg_ErroLeituraDisco[pt_BR]=$(gettext "Erro de leitura do disco")
	cmsg_SemRota[pt_BR]=$(gettext "Sem rota para o servidor")
	cmsg_CheckNet[pt_BR]=$(gettext "Check sua conexão com a internet!")
	cmsg_CommandNotFound[pt_BR]=$(gettext "não encontrei o comando")
	cmsg_ImpossivelContinuar[pt_BR]=$(gettext "IMPOSSÍVEL CONTINUAR")
	cmsg_ImpossivelContinuar1[pt_BR]=$(gettext "Esse script precisa dos comandos listados acima")
	cmsg_ImpossivelContinuar2[pt_BR]=$(gettext "Instale-os e/ou verifique se estão no seu")
	cmsg_InstCommand[pt_BR]=$(gettext "Instalar o(s) comando(s)")
	cmsg_RunNew[pt_BR]=$(gettext "INFO: Rode novamente o aplicativo")
	cmsg_RunNewErro[pt_BR]=$(gettext "ERRO na instalação dos comandos. Tente manualmente")
	cmsg_CopiandoCaminhoReserva[pt_BR]=$(gettext "Criando inicialização padrão/reserva (roaming) para")
	cmsg_Error_not_fatal[pt_BR]=$(gettext "Erro não fatal. Para mais detalhes veja o log")
	cmsg_Wm[pt_BR]=$(gettext "gerenciador de janelas (wm)")
	cmsg_TabelaMBR[pt_BR]=$(gettext "Tabela MBR (dos)")
	cmsg_ExtraEfi[pt_BR]=$(gettext "Detectado boot via EFI ↓ é recomendável instalar EFI ↓")
	cmsg_ExtraNotEfi[pt_BR]=$(gettext "EFI não detectado ↓ é recomendável GPT_BIOS ou MBR_BIOS ↓")
	cmsg_ExtraIso[pt_BR]=$(gettext "Detectado boot via ISO ↓ é recomendável instalar ↓")
	cmsg_ExtraNotIso[pt_BR]=$(gettext "ISO não detectado ↓ é recomendável NETWORK ou NETWORKFULL↓")
	cmsg_ExtraNotHostVoid[pt_BR]=$(gettext "Host VOID não detectado ↓ é recomendável NETWORK↓")
	welcome[pt_BR]=$(gettext "Bem-vindo ao instalador $APP")
	escolhaIdioma[pt_BR]=$(gettext "Escolha o idioma")
	cmsg_Usuario[pt_BR]=$(gettext "Usuário")
	cmsg_adduser1[pt_BR]=$(gettext "Usuário não pode estar root! Novamente?")
	cmsg_adduser2[pt_BR]=$(gettext "Usuário não pode estar vazio! Novamente?")
	cmsg_adduser3[pt_BR]=$(gettext "Senha do usuário não pode estar vazia! Novamente?")
	cmsg_adduser4[pt_BR]=$(gettext "Senha de root não pode estar vazia! Novamente?")
	cmsg_adduser5[pt_BR]=$(gettext "Usuário não pode iniciar com números! Novamente?")
	cmsg_adduser6[pt_BR]=$(gettext "Usuário não pode iniciar com letras maiúsculas! Novamente?")
	cmsg_adduserCancel[pt_BR]=$(gettext "Cadastro de usuário cancelado")
	cmsg_redewifi[pt_BR]=$(gettext "Rede wifi")
	cmsg_senhawifi[pt_BR]=$(gettext "Senha wifi")
	cmsg_mkfs[pt_BR]=$(gettext "↓ é recomendável ext4 ↓")
	cmsg_utilvoidservices[pt_BR]=$(gettext "Utilitário void-services (opcional)")
	cmsg_Servicos[pt_BR]=$(gettext "Serviços")
	cmsg_Usage1[pt_BR]=$(gettext "Instalar")
	cmsg_Usage2[pt_BR]=$(gettext "Rodar chroot na partição instalada")
	cmsg_Usage3[pt_BR]=$(gettext "Ativar modo gráfico")
	cmsg_Usage4[pt_BR]=$(gettext "Saída resumida")
	cmsg_Usage5[pt_BR]=$(gettext "Mostrar versão do aplicativo")
	cmsg_Usage6[pt_BR]=$(gettext "Remove cores da saída")
	cmsg_Usage7[pt_BR]=$(gettext "Este help")
	cmsg_Usage8[pt_BR]=$(gettext "Carregar arquivo de configuração")
	cmsg_Extra1[pt_BR]=$(gettext "Nome Completo")
	cmsg_Extra2[pt_BR]=$(gettext "Nome usuario")
	cmsg_Extra3[pt_BR]=$(gettext "Senha usuario")
	cmsg_Extra4[pt_BR]=$(gettext "Senha root")
	cmsg_Extra6[pt_BR]=$(gettext "Disco destino")
	cmsg_Extra11[pt_BR]=$(gettext "Gerenciador Janelas")
	cmsg_Bios[pt_BR]=$(gettext "Sistema Básico de Entrada e Saída")
	cmsg_Efi[pt_BR]=$(gettext "Interface de Firmware Extensível")
	cmsg_TabelaGPT[pt_BR]=$(gettext "Tabela GPT")
	cmsg_NotConfDefault[pt_BR]=$(gettext "não foi configurado!")
	cmsg_NotConfDisco[pt_BR]=$(gettext "Disco não foi configurado!")
	cmsg_NotConfFileSystem[pt_BR]=$(gettext "Filesystem não foi configurado!")
	cmsg_NotConfBootLoader[pt_BR]=$(gettext "Bootloader não foi configurado!")
	cmsg_NotConfTeclado[pt_BR]=$(gettext "Teclado não foi configurado!")
	cmsg_NotConfTimezone[pt_BR]=$(gettext "Timezone não foi configurado!")
	cmsg_NotConfWm[pt_BR]=$(gettext "Gerenciador de Janelas não foi configurado!")
	cmsg_NotConfWifi[pt_BR]=$(gettext "Rede wifi não foi configurado!")
	cmsg_NotConfExtra[pt_BR]=$(gettext "Extra não foi configurado!")
	cmsg_DefinirAudioServer[pt_BR]=$(gettext "Definir servidor de audio")
}

sh_setEnvironment
sh_getLocale
sh_setLanguage
sh_setVarColors
sh_setAsciiLines
sh_setLogPrefix
[[ "$1" = @(-V|--version) ]] && {
	sh_version
	exit $(($# ? 0 : 1))
}
[[ -z "$1" || "$1" = @(-h|--help) ]] && {
	sh_usage
	exit $(($# ? 0 : 1))
}
sh_checkDependencies
sh_checkDisplay
sh_update_self "$@"
sh_loadSavedConfig
sh_disablePrintk
sh_init "$@"

# sanity checks
case $((LINSTALL + LCHROOT)) in
0) die "${cmsg_Operacao[$LC_DEFAULT]}" ;;
[^1]) die "${cmsg_OneOperacao[$LC_DEFAULT]}" ;;
esac
sh_setMknodTty
#sh_menu_language "$@"
for x in "${appexec[@]}"; do $x; done
sh_enablePrintk
